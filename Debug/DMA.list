
DMA.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004040  08004040  00014040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d0  080040d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080040d0  080040d0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d0  080040d0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080040d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001218  20000080  08004158  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001298  08004158  00021298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008274  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000154d  00000000  00000000  0002831d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000538  00000000  00000000  00029870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  00029da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000240a  00000000  00000000  0002a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000048b7  00000000  00000000  0002c642  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00015e26  00000000  00000000  00030ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00046d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001828  00000000  00000000  00046d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000080 	.word	0x20000080
 800014c:	00000000 	.word	0x00000000
 8000150:	08004028 	.word	0x08004028

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000084 	.word	0x20000084
 800016c:	08004028 	.word	0x08004028

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2iz>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d215      	bcs.n	8000a7e <__aeabi_d2iz+0x36>
 8000a52:	d511      	bpl.n	8000a78 <__aeabi_d2iz+0x30>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d912      	bls.n	8000a84 <__aeabi_d2iz+0x3c>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d105      	bne.n	8000a90 <__aeabi_d2iz+0x48>
 8000a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	bf08      	it	eq
 8000a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f103 0208 	add.w	r2, r3, #8
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f103 0208 	add.w	r2, r3, #8
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f103 0208 	add.w	r2, r3, #8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr

08000b16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d103      	bne.n	8000b4e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e00c      	b.n	8000b68 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3308      	adds	r3, #8
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e002      	b.n	8000b5c <vListInsert+0x2e>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d2f6      	bcs.n	8000b56 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	6892      	ldr	r2, [r2, #8]
 8000bb4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6852      	ldr	r2, [r2, #4]
 8000bbe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d103      	bne.n	8000bd2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d063      	beq.n	8000cd0 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d05f      	beq.n	8000cd0 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c18:	2000      	movs	r0, #0
 8000c1a:	fba2 1203 	umull	r1, r2, r2, r3
 8000c1e:	f04f 0300 	mov.w	r3, #0
 8000c22:	f04f 0400 	mov.w	r4, #0
 8000c26:	0013      	movs	r3, r2
 8000c28:	2400      	movs	r4, #0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d000      	beq.n	8000c30 <xQueueGenericReset+0x40>
 8000c2e:	2001      	movs	r0, #1
 8000c30:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14c      	bne.n	8000cd0 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 8000c36:	f001 f9b1 	bl	8001f9c <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	441a      	add	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2200      	movs	r2, #0
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c66:	3b01      	subs	r3, #1
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c6c:	fb01 f303 	mul.w	r3, r1, r3
 8000c70:	441a      	add	r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	22ff      	movs	r2, #255	; 0xff
 8000c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	22ff      	movs	r2, #255	; 0xff
 8000c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d114      	bne.n	8000cb6 <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d01a      	beq.n	8000cca <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3310      	adds	r3, #16
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fe8d 	bl	80019b8 <xTaskRemoveFromEventList>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d012      	beq.n	8000cca <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <xQueueGenericReset+0xf0>)
 8000ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	f3bf 8f4f 	dsb	sy
 8000cb0:	f3bf 8f6f 	isb	sy
 8000cb4:	e009      	b.n	8000cca <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3310      	adds	r3, #16
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff0c 	bl	8000ad8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3324      	adds	r3, #36	; 0x24
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff07 	bl	8000ad8 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8000cca:	f001 f97f 	bl	8001fcc <vPortExitCritical>
 8000cce:	e001      	b.n	8000cd4 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd90      	pop	{r4, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000ed04 	.word	0xe000ed04

08000ce4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b08b      	sub	sp, #44	; 0x2c
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d033      	beq.n	8000d64 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	fba2 1203 	umull	r1, r2, r2, r3
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	f04f 0400 	mov.w	r4, #0
 8000d0e:	0013      	movs	r3, r2
 8000d10:	2400      	movs	r4, #0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d000      	beq.n	8000d18 <xQueueGenericCreate+0x34>
 8000d16:	2001      	movs	r0, #1
 8000d18:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d122      	bne.n	8000d64 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000d26:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8000d2a:	d81b      	bhi.n	8000d64 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	3348      	adds	r3, #72	; 0x48
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f9be 	bl	80020bc <pvPortMalloc>
 8000d40:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00d      	beq.n	8000d64 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3348      	adds	r3, #72	; 0x48
 8000d50:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d52:	79fa      	ldrb	r2, [r7, #7]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 f805 	bl	8000d6e <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000d64:	69fb      	ldr	r3, [r7, #28]
    }
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}

08000d6e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e002      	b.n	8000d90 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	69b8      	ldr	r0, [r7, #24]
 8000da0:	f7ff ff26 	bl	8000bf0 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000dc2:	f001 f8eb 	bl	8001f9c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dca:	6a3b      	ldr	r3, [r7, #32]
 8000dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d302      	bcc.n	8000dd8 <xQueueGenericSend+0x2c>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d129      	bne.n	8000e2c <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6a38      	ldr	r0, [r7, #32]
 8000dde:	f000 f92d 	bl	800103c <prvCopyDataToQueue>
 8000de2:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d010      	beq.n	8000e0e <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	3324      	adds	r3, #36	; 0x24
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fde1 	bl	80019b8 <xTaskRemoveFromEventList>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d013      	beq.n	8000e24 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000dfc:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <xQueueGenericSend+0x150>)
 8000dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	f3bf 8f4f 	dsb	sy
 8000e08:	f3bf 8f6f 	isb	sy
 8000e0c:	e00a      	b.n	8000e24 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <xQueueGenericSend+0x150>)
 8000e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000e24:	f001 f8d2 	bl	8001fcc <vPortExitCritical>
                return pdPASS;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e063      	b.n	8000ef4 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d103      	bne.n	8000e3a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e32:	f001 f8cb 	bl	8001fcc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e05c      	b.n	8000ef4 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d106      	bne.n	8000e4e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fe7f 	bl	8001b48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e4e:	f001 f8bd 	bl	8001fcc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000e52:	f000 fb55 	bl	8001500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e56:	f001 f8a1 	bl	8001f9c <vPortEnterCritical>
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e66:	d103      	bne.n	8000e70 <xQueueGenericSend+0xc4>
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d103      	bne.n	8000e86 <xQueueGenericSend+0xda>
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e86:	f001 f8a1 	bl	8001fcc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e8a:	1d3a      	adds	r2, r7, #4
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fe6e 	bl	8001b74 <xTaskCheckForTimeOut>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d124      	bne.n	8000ee8 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e9e:	6a38      	ldr	r0, [r7, #32]
 8000ea0:	f000 f990 	bl	80011c4 <prvIsQueueFull>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d018      	beq.n	8000edc <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	3310      	adds	r3, #16
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fd6a 	bl	800198c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000eb8:	6a38      	ldr	r0, [r7, #32]
 8000eba:	f000 f91b 	bl	80010f4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000ebe:	f000 fb2d 	bl	800151c <xTaskResumeAll>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f47f af7c 	bne.w	8000dc2 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <xQueueGenericSend+0x150>)
 8000ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	f3bf 8f4f 	dsb	sy
 8000ed6:	f3bf 8f6f 	isb	sy
 8000eda:	e772      	b.n	8000dc2 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000edc:	6a38      	ldr	r0, [r7, #32]
 8000ede:	f000 f909 	bl	80010f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ee2:	f000 fb1b 	bl	800151c <xTaskResumeAll>
 8000ee6:	e76c      	b.n	8000dc2 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ee8:	6a38      	ldr	r0, [r7, #32]
 8000eea:	f000 f903 	bl	80010f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000eee:	f000 fb15 	bl	800151c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ef2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	e000ed04 	.word	0xe000ed04

08000f00 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f12:	f001 f843 	bl	8001f9c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1a:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d01b      	beq.n	8000f5a <xQueueSemaphoreTake+0x5a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	1e5a      	subs	r2, r3, #1
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00f      	beq.n	8000f52 <xQueueSemaphoreTake+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	3310      	adds	r3, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fd3e 	bl	80019b8 <xTaskRemoveFromEventList>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d007      	beq.n	8000f52 <xQueueSemaphoreTake+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <xQueueSemaphoreTake+0x138>)
 8000f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	f3bf 8f4f 	dsb	sy
 8000f4e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f52:	f001 f83b 	bl	8001fcc <vPortExitCritical>
                return pdPASS;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e069      	b.n	800102e <xQueueSemaphoreTake+0x12e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d103      	bne.n	8000f68 <xQueueSemaphoreTake+0x68>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000f60:	f001 f834 	bl	8001fcc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e062      	b.n	800102e <xQueueSemaphoreTake+0x12e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <xQueueSemaphoreTake+0x7c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fde8 	bl	8001b48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000f7c:	f001 f826 	bl	8001fcc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000f80:	f000 fabe 	bl	8001500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000f84:	f001 f80a 	bl	8001f9c <vPortEnterCritical>
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d103      	bne.n	8000f9e <xQueueSemaphoreTake+0x9e>
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000faa:	d103      	bne.n	8000fb4 <xQueueSemaphoreTake+0xb4>
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000fb4:	f001 f80a 	bl	8001fcc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000fb8:	463a      	mov	r2, r7
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fdd7 	bl	8001b74 <xTaskCheckForTimeOut>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d123      	bne.n	8001014 <xQueueSemaphoreTake+0x114>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000fcc:	69b8      	ldr	r0, [r7, #24]
 8000fce:	f000 f8e3 	bl	8001198 <prvIsQueueEmpty>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d017      	beq.n	8001008 <xQueueSemaphoreTake+0x108>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	3324      	adds	r3, #36	; 0x24
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fcd3 	bl	800198c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000fe6:	69b8      	ldr	r0, [r7, #24]
 8000fe8:	f000 f884 	bl	80010f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000fec:	f000 fa96 	bl	800151c <xTaskResumeAll>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d18d      	bne.n	8000f12 <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <xQueueSemaphoreTake+0x138>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	e784      	b.n	8000f12 <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001008:	69b8      	ldr	r0, [r7, #24]
 800100a:	f000 f873 	bl	80010f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800100e:	f000 fa85 	bl	800151c <xTaskResumeAll>
 8001012:	e77e      	b.n	8000f12 <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001014:	69b8      	ldr	r0, [r7, #24]
 8001016:	f000 f86d 	bl	80010f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800101a:	f000 fa7f 	bl	800151c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800101e:	69b8      	ldr	r0, [r7, #24]
 8001020:	f000 f8ba 	bl	8001198 <prvIsQueueEmpty>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	f43f af73 	beq.w	8000f12 <xQueueSemaphoreTake+0x12>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800102c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800102e:	4618      	mov	r0, r3
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000ed04 	.word	0xe000ed04

0800103c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001050:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d043      	beq.n	80010e2 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d119      	bne.n	8001094 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6858      	ldr	r0, [r3, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	461a      	mov	r2, r3
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	f001 fe38 	bl	8002ce0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	441a      	add	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	429a      	cmp	r2, r3
 8001088:	d32b      	bcc.n	80010e2 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	e026      	b.n	80010e2 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68d8      	ldr	r0, [r3, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	461a      	mov	r2, r3
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	f001 fe1e 	bl	8002ce0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	425b      	negs	r3, r3
 80010ae:	441a      	add	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	425b      	negs	r3, r3
 80010ca:	441a      	add	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d105      	bne.n	80010e2 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3b01      	subs	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80010ea:	693b      	ldr	r3, [r7, #16]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80010fc:	f000 ff4e 	bl	8001f9c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001106:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001108:	e011      	b.n	800112e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	2b00      	cmp	r3, #0
 8001110:	d012      	beq.n	8001138 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3324      	adds	r3, #36	; 0x24
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fc4e 	bl	80019b8 <xTaskRemoveFromEventList>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001122:	f000 fd71 	bl	8001c08 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	3b01      	subs	r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	dce9      	bgt.n	800110a <prvUnlockQueue+0x16>
 8001136:	e000      	b.n	800113a <prvUnlockQueue+0x46>
                        break;
 8001138:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001142:	f000 ff43 	bl	8001fcc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001146:	f000 ff29 	bl	8001f9c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001150:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001152:	e011      	b.n	8001178 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d012      	beq.n	8001182 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3310      	adds	r3, #16
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fc29 	bl	80019b8 <xTaskRemoveFromEventList>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800116c:	f000 fd4c 	bl	8001c08 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	3b01      	subs	r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800117c:	2b00      	cmp	r3, #0
 800117e:	dce9      	bgt.n	8001154 <prvUnlockQueue+0x60>
 8001180:	e000      	b.n	8001184 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001182:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800118c:	f000 ff1e 	bl	8001fcc <vPortExitCritical>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80011a0:	f000 fefc 	bl	8001f9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e001      	b.n	80011b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80011b6:	f000 ff09 	bl	8001fcc <vPortExitCritical>

    return xReturn;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80011cc:	f000 fee6 	bl	8001f9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d8:	429a      	cmp	r2, r3
 80011da:	d102      	bne.n	80011e2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80011dc:	2301      	movs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e001      	b.n	80011e6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80011e6:	f000 fef1 	bl	8001fcc <vPortExitCritical>

    return xReturn;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4618      	mov	r0, r3
 800120a:	f000 ff57 	bl	80020bc <pvPortMalloc>
 800120e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00e      	beq.n	8001234 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001216:	204c      	movs	r0, #76	; 0x4c
 8001218:	f000 ff50 	bl	80020bc <pvPortMalloc>
 800121c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
 800122a:	e005      	b.n	8001238 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800122c:	6978      	ldr	r0, [r7, #20]
 800122e:	f000 fff3 	bl	8002218 <vPortFree>
 8001232:	e001      	b.n	8001238 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d013      	beq.n	8001266 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	2300      	movs	r3, #0
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f80e 	bl	8001276 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800125a:	69f8      	ldr	r0, [r7, #28]
 800125c:	f000 f884 	bl	8001368 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001260:	2301      	movs	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	e002      	b.n	800126c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800126c:	69bb      	ldr	r3, [r7, #24]
    }
 800126e:	4618      	mov	r0, r3
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800128e:	3b01      	subs	r3, #1
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f023 0307 	bic.w	r3, r3, #7
 800129c:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01f      	beq.n	80012e4 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e012      	b.n	80012d0 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	7819      	ldrb	r1, [r3, #0]
 80012b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	4413      	add	r3, r2
 80012b8:	3334      	adds	r3, #52	; 0x34
 80012ba:	460a      	mov	r2, r1
 80012bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d9e9      	bls.n	80012aa <prvInitialiseNewTask+0x34>
 80012d6:	e000      	b.n	80012da <prvInitialiseNewTask+0x64>
            {
                break;
 80012d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012e2:	e003      	b.n	80012ec <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d901      	bls.n	80012f6 <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012f2:	2304      	movs	r3, #4
 80012f4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	6a3a      	ldr	r2, [r7, #32]
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	3304      	adds	r3, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fc08 	bl	8000b16 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001308:	3318      	adds	r3, #24
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fc03 	bl	8000b16 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001314:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f1c3 0205 	rsb	r2, r3, #5
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	3344      	adds	r3, #68	; 0x44
 800132a:	2204      	movs	r2, #4
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fce1 	bl	8002cf6 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	3348      	adds	r3, #72	; 0x48
 8001338:	2201      	movs	r2, #1
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f001 fcda 	bl	8002cf6 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	6938      	ldr	r0, [r7, #16]
 8001348:	f000 fd98 	bl	8001e7c <pxPortInitialiseStack>
 800134c:	4602      	mov	r2, r0
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800135c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001370:	f000 fe14 	bl	8001f9c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <prvAddNewTaskToReadyList+0x108>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <prvAddNewTaskToReadyList+0x108>)
 800137c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <prvAddNewTaskToReadyList+0x10c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001386:	4a3b      	ldr	r2, [pc, #236]	; (8001474 <prvAddNewTaskToReadyList+0x10c>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800138c:	4b38      	ldr	r3, [pc, #224]	; (8001470 <prvAddNewTaskToReadyList+0x108>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d110      	bne.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001394:	f000 fc5c 	bl	8001c50 <prvInitialiseTaskLists>
 8001398:	e00d      	b.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <prvAddNewTaskToReadyList+0x110>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <prvAddNewTaskToReadyList+0x10c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d802      	bhi.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <prvAddNewTaskToReadyList+0x10c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013b6:	4b31      	ldr	r3, [pc, #196]	; (800147c <prvAddNewTaskToReadyList+0x114>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <prvAddNewTaskToReadyList+0x114>)
 80013be:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	2201      	movs	r2, #1
 80013c6:	409a      	lsls	r2, r3
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <prvAddNewTaskToReadyList+0x118>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <prvAddNewTaskToReadyList+0x118>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d6:	492b      	ldr	r1, [pc, #172]	; (8001484 <prvAddNewTaskToReadyList+0x11c>)
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	3204      	adds	r2, #4
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	1d1a      	adds	r2, r3, #4
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <prvAddNewTaskToReadyList+0x11c>)
 8001416:	441a      	add	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	4918      	ldr	r1, [pc, #96]	; (8001484 <prvAddNewTaskToReadyList+0x11c>)
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <prvAddNewTaskToReadyList+0x11c>)
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4403      	add	r3, r0
 800143c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800143e:	f000 fdc5 	bl	8001fcc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <prvAddNewTaskToReadyList+0x110>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00e      	beq.n	8001468 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <prvAddNewTaskToReadyList+0x10c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <prvAddNewTaskToReadyList+0x120>)
 800145a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f3bf 8f4f 	dsb	sy
 8001464:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000174 	.word	0x20000174
 8001474:	2000009c 	.word	0x2000009c
 8001478:	20000180 	.word	0x20000180
 800147c:	20000190 	.word	0x20000190
 8001480:	2000017c 	.word	0x2000017c
 8001484:	200000a0 	.word	0x200000a0
 8001488:	e000ed04 	.word	0xe000ed04

0800148c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <vTaskStartScheduler+0x58>)
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	4912      	ldr	r1, [pc, #72]	; (80014e8 <vTaskStartScheduler+0x5c>)
 80014a0:	4812      	ldr	r0, [pc, #72]	; (80014ec <vTaskStartScheduler+0x60>)
 80014a2:	f7ff fea7 	bl	80011f4 <xTaskCreate>
 80014a6:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d114      	bne.n	80014d8 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80014ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
 80014be:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <vTaskStartScheduler+0x64>)
 80014c2:	f04f 32ff 	mov.w	r2, #4294967295
 80014c6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <vTaskStartScheduler+0x68>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <vTaskStartScheduler+0x6c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80014d4:	f000 fd42 	bl	8001f5c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <vTaskStartScheduler+0x70>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000198 	.word	0x20000198
 80014e8:	08004040 	.word	0x08004040
 80014ec:	08001c21 	.word	0x08001c21
 80014f0:	20000194 	.word	0x20000194
 80014f4:	20000180 	.word	0x20000180
 80014f8:	20000178 	.word	0x20000178
 80014fc:	20000000 	.word	0x20000000

08001500 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <vTaskSuspendAll+0x18>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a03      	ldr	r2, [pc, #12]	; (8001518 <vTaskSuspendAll+0x18>)
 800150c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000019c 	.word	0x2000019c

0800151c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800152a:	f000 fd37 	bl	8001f9c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800152e:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <xTaskResumeAll+0x1b4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	4a66      	ldr	r2, [pc, #408]	; (80016d0 <xTaskResumeAll+0x1b4>)
 8001536:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001538:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <xTaskResumeAll+0x1b4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 80c0 	bne.w	80016c2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <xTaskResumeAll+0x1b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80bb 	beq.w	80016c2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800154c:	e08a      	b.n	8001664 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800154e:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <xTaskResumeAll+0x1bc>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	6a12      	ldr	r2, [r2, #32]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	69d2      	ldr	r2, [r2, #28]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3318      	adds	r3, #24
 8001578:	429a      	cmp	r2, r3
 800157a:	d103      	bne.n	8001584 <xTaskResumeAll+0x68>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2200      	movs	r2, #0
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	6892      	ldr	r2, [r2, #8]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3304      	adds	r3, #4
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d103      	bne.n	80015c2 <xTaskResumeAll+0xa6>
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	2201      	movs	r2, #1
 80015d8:	409a      	lsls	r2, r3
 80015da:	4b40      	ldr	r3, [pc, #256]	; (80016dc <xTaskResumeAll+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	4a3e      	ldr	r2, [pc, #248]	; (80016dc <xTaskResumeAll+0x1c0>)
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e8:	493d      	ldr	r1, [pc, #244]	; (80016e0 <xTaskResumeAll+0x1c4>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3304      	adds	r3, #4
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	3204      	adds	r2, #4
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	1d1a      	adds	r2, r3, #4
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <xTaskResumeAll+0x1c4>)
 8001628:	441a      	add	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001632:	492b      	ldr	r1, [pc, #172]	; (80016e0 <xTaskResumeAll+0x1c4>)
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1c59      	adds	r1, r3, #1
 8001642:	4827      	ldr	r0, [pc, #156]	; (80016e0 <xTaskResumeAll+0x1c4>)
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4403      	add	r3, r0
 800164e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <xTaskResumeAll+0x1c8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	429a      	cmp	r2, r3
 800165c:	d302      	bcc.n	8001664 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <xTaskResumeAll+0x1cc>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <xTaskResumeAll+0x1bc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f47f af70 	bne.w	800154e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001674:	f000 fb68 	bl	8001d48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <xTaskResumeAll+0x1d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d010      	beq.n	80016a6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001684:	f000 f836 	bl	80016f4 <xTaskIncrementTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <xTaskResumeAll+0x1cc>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3b01      	subs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f1      	bne.n	8001684 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <xTaskResumeAll+0x1d0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <xTaskResumeAll+0x1cc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <xTaskResumeAll+0x1d4>)
 80016b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80016c2:	f000 fc83 	bl	8001fcc <vPortExitCritical>

    return xAlreadyYielded;
 80016c6:	693b      	ldr	r3, [r7, #16]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000019c 	.word	0x2000019c
 80016d4:	20000174 	.word	0x20000174
 80016d8:	20000134 	.word	0x20000134
 80016dc:	2000017c 	.word	0x2000017c
 80016e0:	200000a0 	.word	0x200000a0
 80016e4:	2000009c 	.word	0x2000009c
 80016e8:	20000188 	.word	0x20000188
 80016ec:	20000184 	.word	0x20000184
 80016f0:	e000ed04 	.word	0xe000ed04

080016f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016fe:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <xTaskIncrementTick+0x1e0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80dc 	bne.w	80018c0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001708:	4b73      	ldr	r3, [pc, #460]	; (80018d8 <xTaskIncrementTick+0x1e4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001710:	4a71      	ldr	r2, [pc, #452]	; (80018d8 <xTaskIncrementTick+0x1e4>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d110      	bne.n	800173e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800171c:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <xTaskIncrementTick+0x1e8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <xTaskIncrementTick+0x1ec>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6d      	ldr	r2, [pc, #436]	; (80018dc <xTaskIncrementTick+0x1e8>)
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <xTaskIncrementTick+0x1ec>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <xTaskIncrementTick+0x1f0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a6b      	ldr	r2, [pc, #428]	; (80018e4 <xTaskIncrementTick+0x1f0>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	f000 fb05 	bl	8001d48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <xTaskIncrementTick+0x1f4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	429a      	cmp	r2, r3
 8001746:	f0c0 80a6 	bcc.w	8001896 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800174a:	4b64      	ldr	r3, [pc, #400]	; (80018dc <xTaskIncrementTick+0x1e8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d104      	bne.n	800175e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <xTaskIncrementTick+0x1f4>)
 8001756:	f04f 32ff 	mov.w	r2, #4294967295
 800175a:	601a      	str	r2, [r3, #0]
                    break;
 800175c:	e09b      	b.n	8001896 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800175e:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <xTaskIncrementTick+0x1e8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d203      	bcs.n	800177e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001776:	4a5c      	ldr	r2, [pc, #368]	; (80018e8 <xTaskIncrementTick+0x1f4>)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800177c:	e08b      	b.n	8001896 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68d2      	ldr	r2, [r2, #12]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	6892      	ldr	r2, [r2, #8]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3304      	adds	r3, #4
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d103      	bne.n	80017ac <xTaskIncrementTick+0xb8>
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1e5a      	subs	r2, r3, #1
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01e      	beq.n	8001802 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	6a12      	ldr	r2, [r2, #32]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	69d2      	ldr	r2, [r2, #28]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	3318      	adds	r3, #24
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d103      	bne.n	80017f2 <xTaskIncrementTick+0xfe>
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1e5a      	subs	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	2201      	movs	r2, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <xTaskIncrementTick+0x1f8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	4a36      	ldr	r2, [pc, #216]	; (80018ec <xTaskIncrementTick+0x1f8>)
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001818:	4935      	ldr	r1, [pc, #212]	; (80018f0 <xTaskIncrementTick+0x1fc>)
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	3304      	adds	r3, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	3204      	adds	r2, #4
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1d1a      	adds	r2, r3, #4
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <xTaskIncrementTick+0x1fc>)
 8001858:	441a      	add	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001862:	4923      	ldr	r1, [pc, #140]	; (80018f0 <xTaskIncrementTick+0x1fc>)
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	1c59      	adds	r1, r3, #1
 8001872:	481f      	ldr	r0, [pc, #124]	; (80018f0 <xTaskIncrementTick+0x1fc>)
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4403      	add	r3, r0
 800187e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <xTaskIncrementTick+0x200>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	429a      	cmp	r2, r3
 800188c:	f4ff af5d 	bcc.w	800174a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001890:	2301      	movs	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001894:	e759      	b.n	800174a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <xTaskIncrementTick+0x200>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189c:	4914      	ldr	r1, [pc, #80]	; (80018f0 <xTaskIncrementTick+0x1fc>)
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d901      	bls.n	80018b2 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <xTaskIncrementTick+0x204>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e004      	b.n	80018ca <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <xTaskIncrementTick+0x208>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <xTaskIncrementTick+0x208>)
 80018c8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80018ca:	69fb      	ldr	r3, [r7, #28]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000019c 	.word	0x2000019c
 80018d8:	20000178 	.word	0x20000178
 80018dc:	2000012c 	.word	0x2000012c
 80018e0:	20000130 	.word	0x20000130
 80018e4:	2000018c 	.word	0x2000018c
 80018e8:	20000194 	.word	0x20000194
 80018ec:	2000017c 	.word	0x2000017c
 80018f0:	200000a0 	.word	0x200000a0
 80018f4:	2000009c 	.word	0x2000009c
 80018f8:	20000188 	.word	0x20000188
 80018fc:	20000184 	.word	0x20000184

08001900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <vTaskSwitchContext+0x78>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <vTaskSwitchContext+0x7c>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001914:	e02a      	b.n	800196c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <vTaskSwitchContext+0x7c>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <vTaskSwitchContext+0x80>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f1c3 031f 	rsb	r3, r3, #31
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <vTaskSwitchContext+0x84>)
 800193e:	4413      	add	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3308      	adds	r3, #8
 8001954:	429a      	cmp	r2, r3
 8001956:	d104      	bne.n	8001962 <vTaskSwitchContext+0x62>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <vTaskSwitchContext+0x88>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	2000019c 	.word	0x2000019c
 800197c:	20000188 	.word	0x20000188
 8001980:	2000017c 	.word	0x2000017c
 8001984:	200000a0 	.word	0x200000a0
 8001988:	2000009c 	.word	0x2000009c

0800198c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <vTaskPlaceOnEventList+0x28>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3318      	adds	r3, #24
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff f8c5 	bl	8000b2e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80019a4:	2101      	movs	r1, #1
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f000 f9e8 	bl	8001d7c <prvAddCurrentTaskToDelayedList>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000009c 	.word	0x2000009c

080019b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	6a12      	ldr	r2, [r2, #32]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	69d2      	ldr	r2, [r2, #28]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3318      	adds	r3, #24
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d103      	bne.n	80019f6 <xTaskRemoveFromEventList+0x3e>
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <xTaskRemoveFromEventList+0x178>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d15e      	bne.n	8001acc <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	68d2      	ldr	r2, [r2, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	6892      	ldr	r2, [r2, #8]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d103      	bne.n	8001a3c <xTaskRemoveFromEventList+0x84>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	2201      	movs	r2, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <xTaskRemoveFromEventList+0x17c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	4a36      	ldr	r2, [pc, #216]	; (8001b34 <xTaskRemoveFromEventList+0x17c>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	4935      	ldr	r1, [pc, #212]	; (8001b38 <xTaskRemoveFromEventList+0x180>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3304      	adds	r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	3204      	adds	r2, #4
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1d1a      	adds	r2, r3, #4
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <xTaskRemoveFromEventList+0x180>)
 8001aa2:	441a      	add	r2, r3
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aac:	4922      	ldr	r1, [pc, #136]	; (8001b38 <xTaskRemoveFromEventList+0x180>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1c59      	adds	r1, r3, #1
 8001abc:	481e      	ldr	r0, [pc, #120]	; (8001b38 <xTaskRemoveFromEventList+0x180>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4403      	add	r3, r0
 8001ac8:	6019      	str	r1, [r3, #0]
 8001aca:	e01b      	b.n	8001b04 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <xTaskRemoveFromEventList+0x184>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	61da      	str	r2, [r3, #28]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	621a      	str	r2, [r3, #32]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	3218      	adds	r2, #24
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f103 0218 	add.w	r2, r3, #24
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <xTaskRemoveFromEventList+0x184>)
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <xTaskRemoveFromEventList+0x184>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <xTaskRemoveFromEventList+0x184>)
 8001b02:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <xTaskRemoveFromEventList+0x188>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d905      	bls.n	8001b1e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <xTaskRemoveFromEventList+0x18c>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e001      	b.n	8001b22 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001b22:	69fb      	ldr	r3, [r7, #28]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3724      	adds	r7, #36	; 0x24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000019c 	.word	0x2000019c
 8001b34:	2000017c 	.word	0x2000017c
 8001b38:	200000a0 	.word	0x200000a0
 8001b3c:	20000134 	.word	0x20000134
 8001b40:	2000009c 	.word	0x2000009c
 8001b44:	20000188 	.word	0x20000188

08001b48 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <vTaskInternalSetTimeOutState+0x24>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <vTaskInternalSetTimeOutState+0x28>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	605a      	str	r2, [r3, #4]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2000018c 	.word	0x2000018c
 8001b70:	20000178 	.word	0x20000178

08001b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8001b7e:	f000 fa0d 	bl	8001f9c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <xTaskCheckForTimeOut+0x8c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	d102      	bne.n	8001ba2 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e026      	b.n	8001bf0 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <xTaskCheckForTimeOut+0x90>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d00a      	beq.n	8001bc4 <xTaskCheckForTimeOut+0x50>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d305      	bcc.n	8001bc4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e015      	b.n	8001bf0 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20b      	bcs.n	8001be6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffb4 	bl	8001b48 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e004      	b.n	8001bf0 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001bf0:	f000 f9ec 	bl	8001fcc <vPortExitCritical>

    return xReturn;
 8001bf4:	697b      	ldr	r3, [r7, #20]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000178 	.word	0x20000178
 8001c04:	2000018c 	.word	0x2000018c

08001c08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <vTaskMissedYield+0x14>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000188 	.word	0x20000188

08001c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c28:	f000 f852 	bl	8001cd0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <prvIdleTask+0x28>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d9f9      	bls.n	8001c28 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <prvIdleTask+0x2c>)
 8001c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c44:	e7f0      	b.n	8001c28 <prvIdleTask+0x8>
 8001c46:	bf00      	nop
 8001c48:	200000a0 	.word	0x200000a0
 8001c4c:	e000ed04 	.word	0xe000ed04

08001c50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e00c      	b.n	8001c76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <prvInitialiseTaskLists+0x60>)
 8001c68:	4413      	add	r3, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe ff34 	bl	8000ad8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d9ef      	bls.n	8001c5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <prvInitialiseTaskLists+0x64>)
 8001c7e:	f7fe ff2b 	bl	8000ad8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <prvInitialiseTaskLists+0x68>)
 8001c84:	f7fe ff28 	bl	8000ad8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <prvInitialiseTaskLists+0x6c>)
 8001c8a:	f7fe ff25 	bl	8000ad8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c8e:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <prvInitialiseTaskLists+0x70>)
 8001c90:	f7fe ff22 	bl	8000ad8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <prvInitialiseTaskLists+0x74>)
 8001c96:	f7fe ff1f 	bl	8000ad8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <prvInitialiseTaskLists+0x78>)
 8001c9c:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <prvInitialiseTaskLists+0x64>)
 8001c9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <prvInitialiseTaskLists+0x7c>)
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <prvInitialiseTaskLists+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200000a0 	.word	0x200000a0
 8001cb4:	20000104 	.word	0x20000104
 8001cb8:	20000118 	.word	0x20000118
 8001cbc:	20000134 	.word	0x20000134
 8001cc0:	20000148 	.word	0x20000148
 8001cc4:	20000160 	.word	0x20000160
 8001cc8:	2000012c 	.word	0x2000012c
 8001ccc:	20000130 	.word	0x20000130

08001cd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cd6:	e019      	b.n	8001d0c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001cd8:	f000 f960 	bl	8001f9c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <prvCheckTasksWaitingTermination+0x4c>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ff58 	bl	8000b9e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <prvCheckTasksWaitingTermination+0x50>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <prvCheckTasksWaitingTermination+0x50>)
 8001cf6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <prvCheckTasksWaitingTermination+0x54>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <prvCheckTasksWaitingTermination+0x54>)
 8001d00:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001d02:	f000 f963 	bl	8001fcc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f80e 	bl	8001d28 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <prvCheckTasksWaitingTermination+0x54>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e1      	bne.n	8001cd8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000148 	.word	0x20000148
 8001d20:	20000174 	.word	0x20000174
 8001d24:	2000015c 	.word	0x2000015c

08001d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fa6f 	bl	8002218 <vPortFree>
                vPortFree( pxTCB );
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fa6c 	bl	8002218 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <prvResetNextTaskUnblockTime+0x2c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d104      	bne.n	8001d60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <prvResetNextTaskUnblockTime+0x30>)
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d5e:	e005      	b.n	8001d6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <prvResetNextTaskUnblockTime+0x2c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <prvResetNextTaskUnblockTime+0x30>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	2000012c 	.word	0x2000012c
 8001d78:	20000194 	.word	0x20000194

08001d7c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3304      	adds	r3, #4
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ff03 	bl	8000b9e <uxListRemove>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	2201      	movs	r2, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <prvAddCurrentTaskToDelayedList+0xec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4013      	ands	r3, r2
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <prvAddCurrentTaskToDelayedList+0xec>)
 8001db4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d124      	bne.n	8001e08 <prvAddCurrentTaskToDelayedList+0x8c>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d021      	beq.n	8001e08 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	6892      	ldr	r2, [r2, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	3204      	adds	r2, #4
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1d1a      	adds	r2, r3, #4
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001e06:	e026      	b.n	8001e56 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d209      	bcs.n	8001e34 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f7fe fe7e 	bl	8000b2e <vListInsert>
}
 8001e32:	e010      	b.n	8001e56 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f7fe fe74 	bl	8000b2e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d202      	bcs.n	8001e56 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001e50:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6013      	str	r3, [r2, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000178 	.word	0x20000178
 8001e64:	2000009c 	.word	0x2000009c
 8001e68:	2000017c 	.word	0x2000017c
 8001e6c:	20000160 	.word	0x20000160
 8001e70:	20000130 	.word	0x20000130
 8001e74:	2000012c 	.word	0x2000012c
 8001e78:	20000194 	.word	0x20000194

08001e7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3b04      	subs	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f023 0201 	bic.w	r2, r3, #1
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3b04      	subs	r3, #4
 8001eaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001eac:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <pxPortInitialiseStack+0x54>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3b14      	subs	r3, #20
 8001eb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3b20      	subs	r3, #32
 8001ec2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	08001ed5 	.word	0x08001ed5

08001ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001ede:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	f3bf 8f4f 	dsb	sy
 8001eee:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001ef0:	bf00      	nop
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0fc      	beq.n	8001ef2 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
	...

08001f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <pxCurrentTCBConst2>)
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	6808      	ldr	r0, [r1, #0]
 8001f16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f1a:	f380 8809 	msr	PSP, r0
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f380 8811 	msr	BASEPRI, r0
 8001f2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001f2e:	4770      	bx	lr

08001f30 <pxCurrentTCBConst2>:
 8001f30:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop

08001f38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001f38:	4806      	ldr	r0, [pc, #24]	; (8001f54 <prvPortStartFirstTask+0x1c>)
 8001f3a:	6800      	ldr	r0, [r0, #0]
 8001f3c:	6800      	ldr	r0, [r0, #0]
 8001f3e:	f380 8808 	msr	MSP, r0
 8001f42:	b662      	cpsie	i
 8001f44:	b661      	cpsie	f
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	df00      	svc	0
 8001f50:	bf00      	nop
 8001f52:	0000      	.short	0x0000
 8001f54:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop

08001f5c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <xPortStartScheduler+0x38>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <xPortStartScheduler+0x38>)
 8001f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <xPortStartScheduler+0x38>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <xPortStartScheduler+0x38>)
 8001f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f76:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001f78:	f000 f886 	bl	8002088 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <xPortStartScheduler+0x3c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001f82:	f7ff ffd9 	bl	8001f38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001f86:	f7ff fcbb 	bl	8001900 <vTaskSwitchContext>
    prvTaskExitError();
 8001f8a:	f7ff ffa3 	bl	8001ed4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	e000ed20 	.word	0xe000ed20
 8001f98:	20000004 	.word	0x20000004

08001f9c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <vPortEnterCritical+0x2c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4a03      	ldr	r2, [pc, #12]	; (8001fc8 <vPortEnterCritical+0x2c>)
 8001fbc:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000004 	.word	0x20000004

08001fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <vPortExitCritical+0x2c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <vPortExitCritical+0x2c>)
 8001fda:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <vPortExitCritical+0x2c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <vPortExitCritical+0x22>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000004 	.word	0x20000004
 8001ffc:	00000000 	.word	0x00000000

08002000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002000:	f3ef 8009 	mrs	r0, PSP
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <pxCurrentTCBConst>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002010:	6010      	str	r0, [r2, #0]
 8002012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002016:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800201a:	f380 8811 	msr	BASEPRI, r0
 800201e:	f7ff fc6f 	bl	8001900 <vTaskSwitchContext>
 8002022:	f04f 0000 	mov.w	r0, #0
 8002026:	f380 8811 	msr	BASEPRI, r0
 800202a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	6808      	ldr	r0, [r1, #0]
 8002032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002036:	f380 8809 	msr	PSP, r0
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	4770      	bx	lr

08002040 <pxCurrentTCBConst>:
 8002040:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop

08002048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
        __asm volatile
 800204e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002060:	f7ff fb48 	bl	80016f4 <xTaskIncrementTick>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SysTick_Handler+0x3c>)
 800206c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	e000ed04 	.word	0xe000ed04

08002088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <vPortSetupTimerInterrupt+0x24>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <vPortSetupTimerInterrupt+0x28>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <vPortSetupTimerInterrupt+0x2c>)
 800209a:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <vPortSetupTimerInterrupt+0x30>)
 800209c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800209e:	4b03      	ldr	r3, [pc, #12]	; (80020ac <vPortSetupTimerInterrupt+0x24>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	e000e010 	.word	0xe000e010
 80020b0:	e000e018 	.word	0xe000e018
 80020b4:	e000e014 	.word	0xe000e014
 80020b8:	0001193f 	.word	0x0001193f

080020bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80020c8:	f7ff fa1a 	bl	8001500 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80020cc:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <pvPortMalloc+0x144>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80020d4:	f000 f8e0 	bl	8002298 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <pvPortMalloc+0x148>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 8086 	bne.w	80021f2 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01e      	beq.n	800212a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80020ec:	2208      	movs	r2, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d218      	bcs.n	800212a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 80020f8:	2208      	movs	r2, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	2b00      	cmp	r3, #0
 8002108:	d011      	beq.n	800212e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f023 0307 	bic.w	r3, r3, #7
 8002110:	3308      	adds	r3, #8
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	d205      	bcs.n	8002124 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f023 0307 	bic.w	r3, r3, #7
 800211e:	3308      	adds	r3, #8
 8002120:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002122:	e004      	b.n	800212e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002128:	e001      	b.n	800212e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d05e      	beq.n	80021f2 <pvPortMalloc+0x136>
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <pvPortMalloc+0x14c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	d859      	bhi.n	80021f2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800213e:	4b33      	ldr	r3, [pc, #204]	; (800220c <pvPortMalloc+0x150>)
 8002140:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8002142:	4b32      	ldr	r3, [pc, #200]	; (800220c <pvPortMalloc+0x150>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002148:	e004      	b.n	8002154 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d903      	bls.n	8002166 <pvPortMalloc+0xaa>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f1      	bne.n	800214a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <pvPortMalloc+0x144>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	d040      	beq.n	80021f2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2208      	movs	r2, #8
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	2308      	movs	r3, #8
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	429a      	cmp	r2, r3
 8002190:	d90f      	bls.n	80021b2 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	1ad2      	subs	r2, r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80021ac:	68b8      	ldr	r0, [r7, #8]
 80021ae:	f000 f8d5 	bl	800235c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <pvPortMalloc+0x14c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <pvPortMalloc+0x14c>)
 80021be:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <pvPortMalloc+0x14c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <pvPortMalloc+0x154>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d203      	bcs.n	80021d4 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <pvPortMalloc+0x14c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <pvPortMalloc+0x154>)
 80021d2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <pvPortMalloc+0x148>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <pvPortMalloc+0x158>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <pvPortMalloc+0x158>)
 80021f0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80021f2:	f7ff f993 	bl	800151c <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200011a8 	.word	0x200011a8
 8002204:	200011bc 	.word	0x200011bc
 8002208:	200011ac 	.word	0x200011ac
 800220c:	200011a0 	.word	0x200011a0
 8002210:	200011b0 	.word	0x200011b0
 8002214:	200011b4 	.word	0x200011b4

08002218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d02c      	beq.n	8002284 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800222a:	2308      	movs	r3, #8
 800222c:	425b      	negs	r3, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4413      	add	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <vPortFree+0x74>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01e      	beq.n	8002284 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11a      	bne.n	8002284 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <vPortFree+0x74>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	43db      	mvns	r3, r3
 8002258:	401a      	ands	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800225e:	f7ff f94f 	bl	8001500 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <vPortFree+0x78>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <vPortFree+0x78>)
 800226e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f000 f873 	bl	800235c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <vPortFree+0x7c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <vPortFree+0x7c>)
 800227e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002280:	f7ff f94c 	bl	800151c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200011bc 	.word	0x200011bc
 8002290:	200011ac 	.word	0x200011ac
 8002294:	200011b8 	.word	0x200011b8

08002298 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800229e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <prvHeapInit+0xac>)
 80022a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3307      	adds	r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0307 	bic.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <prvHeapInit+0xac>)
 80022c8:	4413      	add	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <prvHeapInit+0xb0>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <prvHeapInit+0xb0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80022e4:	2208      	movs	r2, #8
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0307 	bic.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <prvHeapInit+0xb4>)
 80022f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <prvHeapInit+0xb4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <prvHeapInit+0xb4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <prvHeapInit+0xb4>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <prvHeapInit+0xb8>)
 8002326:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <prvHeapInit+0xbc>)
 800232e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <prvHeapInit+0xc0>)
 8002332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200001a0 	.word	0x200001a0
 8002348:	200011a0 	.word	0x200011a0
 800234c:	200011a8 	.word	0x200011a8
 8002350:	200011b0 	.word	0x200011b0
 8002354:	200011ac 	.word	0x200011ac
 8002358:	200011bc 	.word	0x200011bc

0800235c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <prvInsertBlockIntoFreeList+0xa8>)
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e002      	b.n	8002370 <prvInsertBlockIntoFreeList+0x14>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d8f7      	bhi.n	800236a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d108      	bne.n	800239e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	441a      	add	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	441a      	add	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d118      	bne.n	80023e4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <prvInsertBlockIntoFreeList+0xac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d00d      	beq.n	80023da <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e008      	b.n	80023ec <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <prvInsertBlockIntoFreeList+0xac>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e003      	b.n	80023ec <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d002      	beq.n	80023fa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	200011a0 	.word	0x200011a0
 8002408:	200011a8 	.word	0x200011a8

0800240c <RSA_Encryption>:
 */



double RSA_Encryption(double  original_mess , double n , double e)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002416:	e9c7 2300 	strd	r2, r3, [r7]
	double Encreipted_Mess =0;
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	e9c7 3404 	strd	r3, r4, [r7, #16]
	Encreipted_Mess =pow(original_mess,e);
 8002426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800242a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800242e:	f000 fcc7 	bl	8002dc0 <pow>
 8002432:	e9c7 0104 	strd	r0, r1, [r7, #16]
	Encreipted_Mess= fmod(Encreipted_Mess,n);
 8002436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800243e:	f000 fc63 	bl	8002d08 <fmod>
 8002442:	e9c7 0104 	strd	r0, r1, [r7, #16]
	return Encreipted_Mess;
 8002446:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 800244a:	4618      	mov	r0, r3
 800244c:	4621      	mov	r1, r4
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}

08002454 <RSA_Calc_Euler>:


double RSA_Calc_Euler(double p, double q)
{
 8002454:	b5b0      	push	{r4, r5, r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800245e:	e9c7 2300 	strd	r2, r3, [r7]
	double euler1 = (p-1)*(q-1);
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <RSA_Calc_Euler+0x54>)
 8002468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800246c:	f7fd fe84 	bl	8000178 <__aeabi_dsub>
 8002470:	4603      	mov	r3, r0
 8002472:	460c      	mov	r4, r1
 8002474:	4625      	mov	r5, r4
 8002476:	461c      	mov	r4, r3
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <RSA_Calc_Euler+0x54>)
 800247e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002482:	f7fd fe79 	bl	8000178 <__aeabi_dsub>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4620      	mov	r0, r4
 800248c:	4629      	mov	r1, r5
 800248e:	f7fe f82b 	bl	80004e8 <__aeabi_dmul>
 8002492:	4603      	mov	r3, r0
 8002494:	460c      	mov	r4, r1
 8002496:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return euler1;
 800249a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	4621      	mov	r1, r4
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdb0      	pop	{r4, r5, r7, pc}
 80024a8:	3ff00000 	.word	0x3ff00000

080024ac <RSA_Calc_N>:

int RSA_Calc_N(double p, double q)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024b6:	e9c7 2300 	strd	r2, r3, [r7]
	double n1 = p * q;
 80024ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024c2:	f7fe f811 	bl	80004e8 <__aeabi_dmul>
 80024c6:	4603      	mov	r3, r0
 80024c8:	460c      	mov	r4, r1
 80024ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return n1;
 80024ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024d2:	f7fe fab9 	bl	8000a48 <__aeabi_d2iz>
 80024d6:	4603      	mov	r3, r0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <gcd>:

int gcd(int a, int b)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
	int t;
	while(1) {
		t= a%b;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	fb93 f2f2 	sdiv	r2, r3, r2
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	fb01 f202 	mul.w	r2, r1, r2
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
		if(t==0)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <gcd+0x26>
			return b;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	e004      	b.n	8002510 <gcd+0x30>
		a = b;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	607b      	str	r3, [r7, #4]
		b= t;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	603b      	str	r3, [r7, #0]
		t= a%b;
 800250e:	e7ec      	b.n	80024ea <gcd+0xa>
	}
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <RSA_Generate_e>:

double RSA_Generate_e(double euler)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	e9c7 0100 	strd	r0, r1, [r7]
	double e =2;
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800252e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	//public key
	//e stands for encrypt
	double temp;
	e=2;
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800253a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	//for checking that 1 < e < phi(n) and gcd(e, phi(n)) = 1; i.e., e and phi(n) are coprime.
	while(e<euler) {
 800253e:	e02a      	b.n	8002596 <RSA_Generate_e+0x7a>
		temp = gcd(e,euler);
 8002540:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002544:	f7fe fa80 	bl	8000a48 <__aeabi_d2iz>
 8002548:	4604      	mov	r4, r0
 800254a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800254e:	f7fe fa7b 	bl	8000a48 <__aeabi_d2iz>
 8002552:	4603      	mov	r3, r0
 8002554:	4619      	mov	r1, r3
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff ffc2 	bl	80024e0 <gcd>
 800255c:	4603      	mov	r3, r0
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff58 	bl	8000414 <__aeabi_i2d>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(temp==1)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <RSA_Generate_e+0xa0>)
 8002572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002576:	f7fe fa1f 	bl	80009b8 <__aeabi_dcmpeq>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d114      	bne.n	80025aa <RSA_Generate_e+0x8e>
			break;
		else
			e++;
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <RSA_Generate_e+0xa0>)
 8002586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800258a:	f7fd fdf7 	bl	800017c <__adddf3>
 800258e:	4603      	mov	r3, r0
 8002590:	460c      	mov	r4, r1
 8002592:	e9c7 3404 	strd	r3, r4, [r7, #16]
	while(e<euler) {
 8002596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800259a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800259e:	f7fe fa15 	bl	80009cc <__aeabi_dcmplt>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1cb      	bne.n	8002540 <RSA_Generate_e+0x24>
 80025a8:	e000      	b.n	80025ac <RSA_Generate_e+0x90>
			break;
 80025aa:	bf00      	nop
	}
	return e;
 80025ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	4621      	mov	r1, r4
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd90      	pop	{r4, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	3ff00000 	.word	0x3ff00000

080025c0 <RSA_Decryption_Calc_d>:
	Original_Mess=fmod(m,n);
	return Original_Mess;
}

double RSA_Decryption_Calc_d(double Euler, double e)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80025ca:	e9c7 2300 	strd	r2, r3, [r7]
	double d = 0;
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	f04f 0400 	mov.w	r4, #0
 80025d6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	//private key
	//d stands for decrypt
	//choosing d such that it satisfies d*e = 1 mod phi
	double d1 = 1 / e;
 80025da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025de:	f04f 0000 	mov.w	r0, #0
 80025e2:	490b      	ldr	r1, [pc, #44]	; (8002610 <RSA_Decryption_Calc_d+0x50>)
 80025e4:	f7fe f8aa 	bl	800073c <__aeabi_ddiv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
	d = fmod(d1, Euler);
 80025f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025f8:	f000 fb86 	bl	8002d08 <fmod>
 80025fc:	e9c7 0106 	strd	r0, r1, [r7, #24]

	return d;
 8002600:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
 8002604:	4618      	mov	r0, r3
 8002606:	4621      	mov	r1, r4
 8002608:	3724      	adds	r7, #36	; 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}
 800260e:	bf00      	nop
 8002610:	3ff00000 	.word	0x3ff00000

08002614 <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <EXTI0_IRQHandler+0x1c>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <EXTI0_IRQHandler+0x1c>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <EXTI0_IRQHandler+0x20>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4798      	blx	r3

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40010400 	.word	0x40010400
 8002634:	200011f8 	.word	0x200011f8

08002638 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <EXTI1_IRQHandler+0x1c>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <EXTI1_IRQHandler+0x1c>)
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <EXTI1_IRQHandler+0x20>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4798      	blx	r3

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010400 	.word	0x40010400
 8002658:	200011f8 	.word	0x200011f8

0800265c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <EXTI2_IRQHandler+0x1c>)
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <EXTI2_IRQHandler+0x1c>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <EXTI2_IRQHandler+0x20>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4798      	blx	r3
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40010400 	.word	0x40010400
 800267c:	200011f8 	.word	0x200011f8

08002680 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <EXTI3_IRQHandler+0x1c>)
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <EXTI3_IRQHandler+0x1c>)
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <EXTI3_IRQHandler+0x20>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4798      	blx	r3
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40010400 	.word	0x40010400
 80026a0:	200011f8 	.word	0x200011f8

080026a4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <EXTI4_IRQHandler+0x1c>)
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <EXTI4_IRQHandler+0x1c>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <EXTI4_IRQHandler+0x20>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	4798      	blx	r3
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40010400 	.word	0x40010400
 80026c4:	200011f8 	.word	0x200011f8

080026c8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <EXTI9_5_IRQHandler+0x22>
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	4a22      	ldr	r2, [pc, #136]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 80026de:	f043 0320 	orr.w	r3, r3, #32
 80026e2:	6153      	str	r3, [r2, #20]
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <EXTI9_5_IRQHandler+0xa4>)
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <EXTI9_5_IRQHandler+0x40>
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 80026fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002700:	6153      	str	r3, [r2, #20]
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <EXTI9_5_IRQHandler+0xa4>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <EXTI9_5_IRQHandler+0x5e>
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 800271a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271e:	6153      	str	r3, [r2, #20]
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <EXTI9_5_IRQHandler+0xa4>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <EXTI9_5_IRQHandler+0x7c>
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6153      	str	r3, [r2, #20]
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <EXTI9_5_IRQHandler+0xa4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <EXTI9_5_IRQHandler+0x9a>
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <EXTI9_5_IRQHandler+0xa0>)
 8002756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800275a:	6153      	str	r3, [r2, #20]
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <EXTI9_5_IRQHandler+0xa4>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	4798      	blx	r3

}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40010400 	.word	0x40010400
 800276c:	200011f8 	.word	0x200011f8

08002770 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <EXTI15_10_IRQHandler+0x18>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	4a03      	ldr	r2, [pc, #12]	; (8002788 <EXTI15_10_IRQHandler+0x18>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6153      	str	r3, [r2, #20]

}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40010400 	.word	0x40010400

0800278c <DMA_Wait_transmite_done>:



//private functions
void DMA_Wait_transmite_done(uint8_t CHANNELx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
	// Wait for DMA transfer completion
	while (!((DMA_ISR>>CHANNEL_1)));
 8002796:	bf00      	nop
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <DMA_Wait_transmite_done+0x20>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0fa      	beq.n	8002798 <DMA_Wait_transmite_done+0xc>
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40020000 	.word	0x40020000

080027b0 <MCAL_DMA_INIT>:



void MCAL_DMA_INIT(DMA_Config * dma_Config)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

	if(dma_Config->DMA_NUMx == 1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d161      	bne.n	8002884 <MCAL_DMA_INIT+0xd4>
	{
		RCC_DMA1_CLOCK_EN();
 80027c0:	4b33      	ldr	r3, [pc, #204]	; (8002890 <MCAL_DMA_INIT+0xe0>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4a32      	ldr	r2, [pc, #200]	; (8002890 <MCAL_DMA_INIT+0xe0>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6113      	str	r3, [r2, #16]
		NVIC_IRQ11_DMA_CH1_ENABLE();
 80027cc:	4b31      	ldr	r3, [pc, #196]	; (8002894 <MCAL_DMA_INIT+0xe4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a30      	ldr	r2, [pc, #192]	; (8002894 <MCAL_DMA_INIT+0xe4>)
 80027d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027d6:	6013      	str	r3, [r2, #0]

		if(dma_Config->CHANNELx== CHANNEL_1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7f1b      	ldrb	r3, [r3, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d151      	bne.n	8002884 <MCAL_DMA_INIT+0xd4>
		{
			if(dma_Config->DMA_MODE == DMA_MODE_MEMORY2MEMOEY_EN)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027e8:	d105      	bne.n	80027f6 <MCAL_DMA_INIT+0x46>
			{
				DMA_CCR_ch1 |=DMA_MODE_MEMORY2MEMOEY_EN; //mem2mem
 80027ea:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6013      	str	r3, [r2, #0]
			}

			if(dma_Config->DATA_TRANSFER_DIR == DATA_TRANSFER_DIR_MEM2MEM)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d105      	bne.n	800280a <MCAL_DMA_INIT+0x5a>
			{
				DMA_CCR_ch1 |=DATA_TRANSFER_DIR_MEM2MEM; //read from mem
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a25      	ldr	r2, [pc, #148]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	6013      	str	r3, [r2, #0]
			}
			if(dma_Config->MEMORY_SIZE == MEMORY_SIZE_32)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002812:	d105      	bne.n	8002820 <MCAL_DMA_INIT+0x70>
			{
				DMA_CCR_ch1 |=MEMORY_SIZE_32;
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 800281a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800281e:	6013      	str	r3, [r2, #0]
			}
			if(dma_Config->PERIPHERAL_SIZE == PERIPHERAL_SIZE_32)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002828:	d105      	bne.n	8002836 <MCAL_DMA_INIT+0x86>
			{
				DMA_CCR_ch1 |=PERIPHERAL_SIZE_32;
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002834:	6013      	str	r3, [r2, #0]
			}

			if(dma_Config->MEMORY_increment_MODE == MEMORY_increment_Enable)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b80      	cmp	r3, #128	; 0x80
 800283c:	d105      	bne.n	800284a <MCAL_DMA_INIT+0x9a>
			{
				DMA_CCR_ch1 |=MEMORY_increment_Enable;
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a15      	ldr	r2, [pc, #84]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002848:	6013      	str	r3, [r2, #0]
			}
			if(dma_Config->PERIPHERAL_increment_MODE == PERIPHERAL_increment_Enable)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d105      	bne.n	800285e <MCAL_DMA_INIT+0xae>
			{
				DMA_CCR_ch1 |=PERIPHERAL_increment_Enable;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285c:	6013      	str	r3, [r2, #0]
			}
			if(dma_Config->Transfer_complete_interrupt_EnORdis == Transfer_complete_interrupt_Enable)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7f5b      	ldrb	r3, [r3, #29]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <MCAL_DMA_INIT+0xc8>
			{
				DMA_CCR_ch1 |=(1<<1);
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	6013      	str	r3, [r2, #0]
				Transfer_complete_interrupt_En_disable_flg = 1;
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <MCAL_DMA_INIT+0xec>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
			}

			DMA_CCR_ch1 |=(1<<5);
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <MCAL_DMA_INIT+0xe8>)
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	6013      	str	r3, [r2, #0]


		}
	}
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	e000e100 	.word	0xe000e100
 8002898:	40020008 	.word	0x40020008
 800289c:	200011c0 	.word	0x200011c0

080028a0 <MCAL_DMA_COPY_MEMORY2MEMORY>:



void MCAL_DMA_COPY_MEMORY2MEMORY(uint8_t DMA_NUMx , uint8_t CHANNELx,uint32_t *PtrSource , uint32_t *PtrDestination , uint32_t size)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60ba      	str	r2, [r7, #8]
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	460b      	mov	r3, r1
 80028b0:	73bb      	strb	r3, [r7, #14]
	if(DMA_NUMx == 1)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d11b      	bne.n	80028f0 <MCAL_DMA_COPY_MEMORY2MEMORY+0x50>
	{
		if(CHANNELx == CHANNEL_1)
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <MCAL_DMA_COPY_MEMORY2MEMORY+0x30>
		{
			/*1. Set the peripheral register address in the DMA_CPARx register. The data will be
				 moved from/ to this address to/ from the memory after the peripheral event.*/
			DMA_CPAR_ch1 =(uint32_t)PtrDestination ;
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <MCAL_DMA_COPY_MEMORY2MEMORY+0x58>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6013      	str	r3, [r2, #0]

			/*2. Set the memory address in the DMA_CMARx register. The data will be written to or
				read from this memory after the peripheral event.*/
			DMA_CMAR_ch1 =(uint32_t)PtrSource ;
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <MCAL_DMA_COPY_MEMORY2MEMORY+0x5c>)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	6013      	str	r3, [r2, #0]

			/*  3. Configure the total number of data to be transferred in the DMA_CNDTRx register.
			    After each peripheral event, this value will be decremented.*/
			DMA_CNDTR_ch1 = size; // Number of data items to transfer
 80028ca:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <MCAL_DMA_COPY_MEMORY2MEMORY+0x60>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6013      	str	r3, [r2, #0]
		}
		MCAL_DMA_TRIGGER_CH_EN(CHANNELx);
 80028d0:	7bbb      	ldrb	r3, [r7, #14]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f818 	bl	8002908 <MCAL_DMA_TRIGGER_CH_EN>
		if(Transfer_complete_interrupt_En_disable_flg==0)
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MCAL_DMA_COPY_MEMORY2MEMORY+0x64>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <MCAL_DMA_COPY_MEMORY2MEMORY+0x50>
		{
			DMA_Wait_transmite_done(CHANNELx);
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff52 	bl	800278c <DMA_Wait_transmite_done>
			MCAL_DMA_CH_DIS(CHANNELx);
 80028e8:	7bbb      	ldrb	r3, [r7, #14]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f822 	bl	8002934 <MCAL_DMA_CH_DIS>
		}

	}
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40020010 	.word	0x40020010
 80028fc:	40020014 	.word	0x40020014
 8002900:	4002000c 	.word	0x4002000c
 8002904:	200011c0 	.word	0x200011c0

08002908 <MCAL_DMA_TRIGGER_CH_EN>:


void MCAL_DMA_TRIGGER_CH_EN(uint8_t CHANNELx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	/*Bit 0 EN: Channel enable
	This bit is set and cleared by software.
	0: Channel disabled
	1: Channel enabled*/
	if(CHANNELx == CHANNEL_1)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <MCAL_DMA_TRIGGER_CH_EN+0x1c>
	{
		DMA_CCR_ch1 |=CHANNEL_1_ENABLE;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <MCAL_DMA_TRIGGER_CH_EN+0x28>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <MCAL_DMA_TRIGGER_CH_EN+0x28>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6013      	str	r3, [r2, #0]
	}
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40020008 	.word	0x40020008

08002934 <MCAL_DMA_CH_DIS>:

void MCAL_DMA_CH_DIS(uint8_t CHANNELx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
	/*Bit 0 EN: Channel enable
	This bit is set and cleared by software.
	0: Channel disabled
	1: Channel enabled*/
	if(CHANNELx == CHANNEL_1)
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d103      	bne.n	800294c <MCAL_DMA_CH_DIS+0x18>
	{
		DMA_CCR_ch1 |=CHANNEL_1_DISABLE;
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <MCAL_DMA_CH_DIS+0x24>)
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <MCAL_DMA_CH_DIS+0x24>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6013      	str	r3, [r2, #0]
	}
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40020008 	.word	0x40020008

0800295c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_Call_Back ();
 8002960:	4b02      	ldr	r3, [pc, #8]	; (800296c <USART1_IRQHandler+0x10>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4798      	blx	r3

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20001234 	.word	0x20001234

08002970 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_Call_Back ();
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <USART2_IRQHandler+0x10>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	4798      	blx	r3

}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20001234 	.word	0x20001234

08002984 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_Call_Back ();
 8002988:	4b02      	ldr	r3, [pc, #8]	; (8002994 <USART3_IRQHandler+0x10>)
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	4798      	blx	r3

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20001234 	.word	0x20001234

08002998 <DMA1_Channel1_IRQHandler>:
QueueHandle_t xQueueHandel = NULL;



void DMA1_Channel1_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	if((DMA_ISR &(1<<1))>>1)
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <DMA1_Channel1_IRQHandler+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d014      	beq.n	80029d2 <DMA1_Channel1_IRQHandler+0x3a>
	{
		DMA_IFCR |=(1<<0);//Clears the corresponding TCIF flag in the DMA_ISR register
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <DMA1_Channel1_IRQHandler+0x44>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <DMA1_Channel1_IRQHandler+0x44>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]
		DMA_IFCR |=(1<<1);//Clears the corresponding TCIF flag in the DMA_ISR register
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <DMA1_Channel1_IRQHandler+0x44>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a08      	ldr	r2, [pc, #32]	; (80029dc <DMA1_Channel1_IRQHandler+0x44>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6013      	str	r3, [r2, #0]
		DMA_CCR_ch1 &=~(1<<0);
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <DMA1_Channel1_IRQHandler+0x48>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <DMA1_Channel1_IRQHandler+0x48>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	6013      	str	r3, [r2, #0]
		MCAL_DMA_CH_DIS(CHANNEL_1);
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7ff ffb1 	bl	8002934 <MCAL_DMA_CH_DIS>
	}
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020004 	.word	0x40020004
 80029e0:	40020008 	.word	0x40020008

080029e4 <RSA_Calc_Init>:


void RSA_Calc_Init(void)
{
 80029e4:	b598      	push	{r3, r4, r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	euler=RSA_Calc_Euler(p,q);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <RSA_Calc_Init+0x7c>)
 80029ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <RSA_Calc_Init+0x80>)
 80029f0:	cb18      	ldmia	r3, {r3, r4}
 80029f2:	461a      	mov	r2, r3
 80029f4:	4623      	mov	r3, r4
 80029f6:	f7ff fd2d 	bl	8002454 <RSA_Calc_Euler>
 80029fa:	4603      	mov	r3, r0
 80029fc:	460c      	mov	r4, r1
 80029fe:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <RSA_Calc_Init+0x84>)
 8002a00:	e9c2 3400 	strd	r3, r4, [r2]
	n=RSA_Calc_N(p,q);
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <RSA_Calc_Init+0x7c>)
 8002a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <RSA_Calc_Init+0x80>)
 8002a0c:	cb18      	ldmia	r3, {r3, r4}
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4623      	mov	r3, r4
 8002a12:	f7ff fd4b 	bl	80024ac <RSA_Calc_N>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fcfb 	bl	8000414 <__aeabi_i2d>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <RSA_Calc_Init+0x88>)
 8002a24:	e9c2 3400 	strd	r3, r4, [r2]
	e=RSA_Generate_e(euler);
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <RSA_Calc_Init+0x84>)
 8002a2a:	cb18      	ldmia	r3, {r3, r4}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	4621      	mov	r1, r4
 8002a30:	f7ff fd74 	bl	800251c <RSA_Generate_e>
 8002a34:	4603      	mov	r3, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <RSA_Calc_Init+0x8c>)
 8002a3a:	e9c2 3400 	strd	r3, r4, [r2]
	d =RSA_Decryption_Calc_d(euler,e);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <RSA_Calc_Init+0x84>)
 8002a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <RSA_Calc_Init+0x8c>)
 8002a46:	cb18      	ldmia	r3, {r3, r4}
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	f7ff fdb8 	bl	80025c0 <RSA_Decryption_Calc_d>
 8002a50:	4603      	mov	r3, r0
 8002a52:	460c      	mov	r4, r1
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <RSA_Calc_Init+0x90>)
 8002a56:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002a5a:	bf00      	nop
 8002a5c:	bd98      	pop	{r3, r4, r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000008 	.word	0x20000008
 8002a64:	20000010 	.word	0x20000010
 8002a68:	200011c8 	.word	0x200011c8
 8002a6c:	200011d0 	.word	0x200011d0
 8002a70:	200011d8 	.word	0x200011d8
 8002a74:	200011e0 	.word	0x200011e0

08002a78 <main>:

int main(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af02      	add	r7, sp, #8
	DMA_Config dma_cfg;
	dma_cfg.DMA_NUMx = DMA_NUM_1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	607b      	str	r3, [r7, #4]
	dma_cfg.CHANNELx = CHANNEL_1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3020 	strb.w	r3, [r7, #32]
	dma_cfg.DMA_MODE = DMA_MODE_MEMORY2MEMOEY_EN;
 8002a88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a8c:	60bb      	str	r3, [r7, #8]
	dma_cfg.DATA_TRANSFER_DIR = DATA_TRANSFER_DIR_MEM2MEM;
 8002a8e:	2310      	movs	r3, #16
 8002a90:	61fb      	str	r3, [r7, #28]
	dma_cfg.MEMORY_increment_MODE = MEMORY_increment_Enable;
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	60fb      	str	r3, [r7, #12]
	dma_cfg.PERIPHERAL_increment_MODE = PERIPHERAL_increment_Enable;
 8002a96:	2340      	movs	r3, #64	; 0x40
 8002a98:	613b      	str	r3, [r7, #16]
	dma_cfg.MEMORY_SIZE = MEMORY_SIZE_32;
 8002a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a9e:	617b      	str	r3, [r7, #20]
	dma_cfg.PERIPHERAL_SIZE = PERIPHERAL_SIZE_32;
 8002aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa4:	61bb      	str	r3, [r7, #24]
	dma_cfg.Transfer_complete_interrupt_EnORdis = Transfer_complete_interrupt_Enable;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	RSA_Calc_Init();
 8002aac:	f7ff ff9a 	bl	80029e4 <RSA_Calc_Init>
	MCAL_DMA_INIT(&dma_cfg);
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe7c 	bl	80027b0 <MCAL_DMA_INIT>


	// Initialize source array with some data
	for (uint32_t i = 0; i < ARRAY_SIZE; i++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	e007      	b.n	8002ace <main+0x56>
	{
		OriginalData[i] = i;
 8002abe:	491a      	ldr	r1, [pc, #104]	; (8002b28 <main+0xb0>)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i = 0; i < ARRAY_SIZE; i++)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d9f4      	bls.n	8002abe <main+0x46>
	}


	//Semaphores Creation

	xSmphor_EncryptionIsDone = xSemaphoreCreateBinary();
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7fe f903 	bl	8000ce4 <xQueueGenericCreate>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <main+0xb4>)
 8002ae2:	601a      	str	r2, [r3, #0]
	xSmphor_Start_Encryption = xSemaphoreCreateBinary();
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f7fe f8fb 	bl	8000ce4 <xQueueGenericCreate>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <main+0xb8>)
 8002af2:	601a      	str	r2, [r3, #0]

	/*===============Tasks Creation===============*/
	xTaskCreate(DMA_COPY_MEMORY2MEMORY, "DMA_COPY_MEMORY2MEMORY", 128, NULL, 3, xDMA_COPY_MEMORY2MEMORY_Handle);
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <main+0xbc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2303      	movs	r3, #3
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	490d      	ldr	r1, [pc, #52]	; (8002b38 <main+0xc0>)
 8002b04:	480d      	ldr	r0, [pc, #52]	; (8002b3c <main+0xc4>)
 8002b06:	f7fe fb75 	bl	80011f4 <xTaskCreate>
	xTaskCreate(EncryptionTask2, "EncryptionTask2", 128, NULL, 2, xEncryptionTask2_Handle);
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <main+0xc8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	2302      	movs	r3, #2
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	490a      	ldr	r1, [pc, #40]	; (8002b44 <main+0xcc>)
 8002b1a:	480b      	ldr	r0, [pc, #44]	; (8002b48 <main+0xd0>)
 8002b1c:	f7fe fb6a 	bl	80011f4 <xTaskCreate>



	//Scheduler Start
	vTaskStartScheduler();
 8002b20:	f7fe fcb4 	bl	800148c <vTaskStartScheduler>

	while(1)
 8002b24:	e7fe      	b.n	8002b24 <main+0xac>
 8002b26:	bf00      	nop
 8002b28:	20001284 	.word	0x20001284
 8002b2c:	200011f0 	.word	0x200011f0
 8002b30:	200011f4 	.word	0x200011f4
 8002b34:	200011e8 	.word	0x200011e8
 8002b38:	08004048 	.word	0x08004048
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	200011ec 	.word	0x200011ec
 8002b44:	08004060 	.word	0x08004060
 8002b48:	08002ba5 	.word	0x08002ba5

08002b4c <DMA_COPY_MEMORY2MEMORY>:



/*==============System Tasks==========*/
void DMA_COPY_MEMORY2MEMORY(void* params)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(xSmphor_EncryptionIsDone);
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <DMA_COPY_MEMORY2MEMORY+0x48>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f7fe f925 	bl	8000dac <xQueueGenericSend>
	while(1)
	{
		if(xSemaphoreTake(xSmphor_EncryptionIsDone , (TickType_t)5)==pdTRUE)
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <DMA_COPY_MEMORY2MEMORY+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2105      	movs	r1, #5
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f9c9 	bl	8000f00 <xQueueSemaphoreTake>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d1f6      	bne.n	8002b62 <DMA_COPY_MEMORY2MEMORY+0x16>
		{
			MCAL_DMA_COPY_MEMORY2MEMORY(DMA_NUM_1,CHANNEL_1,OriginalData, EcrypteddData, ARRAY_SIZE);
 8002b74:	2305      	movs	r3, #5
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <DMA_COPY_MEMORY2MEMORY+0x4c>)
 8002b7a:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <DMA_COPY_MEMORY2MEMORY+0x50>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7ff fe8e 	bl	80028a0 <MCAL_DMA_COPY_MEMORY2MEMORY>
			xSemaphoreGive(xSmphor_Start_Encryption);
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <DMA_COPY_MEMORY2MEMORY+0x54>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f7fe f90d 	bl	8000dac <xQueueGenericSend>
		if(xSemaphoreTake(xSmphor_EncryptionIsDone , (TickType_t)5)==pdTRUE)
 8002b92:	e7e6      	b.n	8002b62 <DMA_COPY_MEMORY2MEMORY+0x16>
 8002b94:	200011f0 	.word	0x200011f0
 8002b98:	20001270 	.word	0x20001270
 8002b9c:	20001284 	.word	0x20001284
 8002ba0:	200011f4 	.word	0x200011f4

08002ba4 <EncryptionTask2>:
	}
}


void EncryptionTask2(void* params)
{
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(xSemaphoreTake(xSmphor_Start_Encryption , (TickType_t)5)==pdTRUE)
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <EncryptionTask2+0x80>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2105      	movs	r1, #5
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe f9a4 	bl	8000f00 <xQueueSemaphoreTake>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d1f6      	bne.n	8002bac <EncryptionTask2+0x8>
		{
			for (int i = 0; i < ARRAY_SIZE; i++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e023      	b.n	8002c0c <EncryptionTask2+0x68>
			{
				EcrypteddData[i] = RSA_Encryption(EcrypteddData[i], n, e);
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <EncryptionTask2+0x84>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fc11 	bl	80003f4 <__aeabi_ui2d>
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	460e      	mov	r6, r1
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <EncryptionTask2+0x88>)
 8002bd8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <EncryptionTask2+0x8c>)
 8002bde:	cb18      	ldmia	r3, {r3, r4}
 8002be0:	e9cd 3400 	strd	r3, r4, [sp]
 8002be4:	4613      	mov	r3, r2
 8002be6:	460a      	mov	r2, r1
 8002be8:	4628      	mov	r0, r5
 8002bea:	4631      	mov	r1, r6
 8002bec:	f7ff fc0e 	bl	800240c <RSA_Encryption>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	460c      	mov	r4, r1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	f7fd ff4e 	bl	8000a98 <__aeabi_d2uiz>
 8002bfc:	4601      	mov	r1, r0
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <EncryptionTask2+0x84>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < ARRAY_SIZE; i++)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	ddd8      	ble.n	8002bc4 <EncryptionTask2+0x20>
			}
			//Give the semaphore when end the Encryption
			xSemaphoreGive(xSmphor_EncryptionIsDone);
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <EncryptionTask2+0x90>)
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	2300      	movs	r3, #0
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f7fe f8c6 	bl	8000dac <xQueueGenericSend>
		if(xSemaphoreTake(xSmphor_Start_Encryption , (TickType_t)5)==pdTRUE)
 8002c20:	e7c4      	b.n	8002bac <EncryptionTask2+0x8>
 8002c22:	bf00      	nop
 8002c24:	200011f4 	.word	0x200011f4
 8002c28:	20001270 	.word	0x20001270
 8002c2c:	200011d0 	.word	0x200011d0
 8002c30:	200011d8 	.word	0x200011d8
 8002c34:	200011f0 	.word	0x200011f0

08002c38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8002c38:	480d      	ldr	r0, [pc, #52]	; (8002c70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c3a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c40:	480c      	ldr	r0, [pc, #48]	; (8002c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c42:	490d      	ldr	r1, [pc, #52]	; (8002c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <LoopForever+0xe>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c48:	e002      	b.n	8002c50 <LoopCopyDataInit>

08002c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4e:	3304      	adds	r3, #4

08002c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c54:	d3f9      	bcc.n	8002c4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c58:	4c0a      	ldr	r4, [pc, #40]	; (8002c84 <LoopForever+0x16>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c5c:	e001      	b.n	8002c62 <LoopFillZerobss>

08002c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c60:	3204      	adds	r2, #4

08002c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c64:	d3fb      	bcc.n	8002c5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c66:	f000 f817 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c6a:	f7ff ff05 	bl	8002a78 <main>

08002c6e <LoopForever>:

LoopForever:
    b LoopForever
 8002c6e:	e7fe      	b.n	8002c6e <LoopForever>
   ldr   r0, =_estack
 8002c70:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002c7c:	080040d8 	.word	0x080040d8
  ldr r2, =_sbss
 8002c80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002c84:	20001298 	.word	0x20001298

08002c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c88:	e7fe      	b.n	8002c88 <ADC1_2_IRQHandler>
	...

08002c8c <__errno>:
 8002c8c:	4b01      	ldr	r3, [pc, #4]	; (8002c94 <__errno+0x8>)
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000018 	.word	0x20000018

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	2500      	movs	r5, #0
 8002c9c:	4e0c      	ldr	r6, [pc, #48]	; (8002cd0 <__libc_init_array+0x38>)
 8002c9e:	4c0d      	ldr	r4, [pc, #52]	; (8002cd4 <__libc_init_array+0x3c>)
 8002ca0:	1ba4      	subs	r4, r4, r6
 8002ca2:	10a4      	asrs	r4, r4, #2
 8002ca4:	42a5      	cmp	r5, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	f001 f9be 	bl	8004028 <_init>
 8002cac:	2500      	movs	r5, #0
 8002cae:	4e0a      	ldr	r6, [pc, #40]	; (8002cd8 <__libc_init_array+0x40>)
 8002cb0:	4c0a      	ldr	r4, [pc, #40]	; (8002cdc <__libc_init_array+0x44>)
 8002cb2:	1ba4      	subs	r4, r4, r6
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	42a5      	cmp	r5, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cc0:	4798      	blx	r3
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cca:	4798      	blx	r3
 8002ccc:	3501      	adds	r5, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	080040d0 	.word	0x080040d0
 8002cd4:	080040d0 	.word	0x080040d0
 8002cd8:	080040d0 	.word	0x080040d0
 8002cdc:	080040d4 	.word	0x080040d4

08002ce0 <memcpy>:
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	1e43      	subs	r3, r0, #1
 8002ce4:	440a      	add	r2, r1
 8002ce6:	4291      	cmp	r1, r2
 8002ce8:	d100      	bne.n	8002cec <memcpy+0xc>
 8002cea:	bd10      	pop	{r4, pc}
 8002cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cf4:	e7f7      	b.n	8002ce6 <memcpy+0x6>

08002cf6 <memset>:
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4402      	add	r2, r0
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d100      	bne.n	8002d00 <memset+0xa>
 8002cfe:	4770      	bx	lr
 8002d00:	f803 1b01 	strb.w	r1, [r3], #1
 8002d04:	e7f9      	b.n	8002cfa <memset+0x4>
	...

08002d08 <fmod>:
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	b08b      	sub	sp, #44	; 0x2c
 8002d0e:	461f      	mov	r7, r3
 8002d10:	4604      	mov	r4, r0
 8002d12:	460d      	mov	r5, r1
 8002d14:	4616      	mov	r6, r2
 8002d16:	f000 f9af 	bl	8003078 <__ieee754_fmod>
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <fmod+0xb0>)
 8002d1c:	4680      	mov	r8, r0
 8002d1e:	f993 a000 	ldrsb.w	sl, [r3]
 8002d22:	4689      	mov	r9, r1
 8002d24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002d28:	d030      	beq.n	8002d8c <fmod+0x84>
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	4630      	mov	r0, r6
 8002d30:	4639      	mov	r1, r7
 8002d32:	f7fd fe73 	bl	8000a1c <__aeabi_dcmpun>
 8002d36:	bb48      	cbnz	r0, 8002d8c <fmod+0x84>
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	4629      	mov	r1, r5
 8002d40:	f7fd fe6c 	bl	8000a1c <__aeabi_dcmpun>
 8002d44:	4683      	mov	fp, r0
 8002d46:	bb08      	cbnz	r0, 8002d8c <fmod+0x84>
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	4639      	mov	r1, r7
 8002d50:	f7fd fe32 	bl	80009b8 <__aeabi_dcmpeq>
 8002d54:	b1d0      	cbz	r0, 8002d8c <fmod+0x84>
 8002d56:	2301      	movs	r3, #1
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <fmod+0xb4>)
 8002d5c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002d66:	f8cd b020 	str.w	fp, [sp, #32]
 8002d6a:	f1ba 0f00 	cmp.w	sl, #0
 8002d6e:	d112      	bne.n	8002d96 <fmod+0x8e>
 8002d70:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002d74:	4668      	mov	r0, sp
 8002d76:	f001 f84b 	bl	8003e10 <matherr>
 8002d7a:	b1b8      	cbz	r0, 8002dac <fmod+0xa4>
 8002d7c:	9b08      	ldr	r3, [sp, #32]
 8002d7e:	b11b      	cbz	r3, 8002d88 <fmod+0x80>
 8002d80:	f7ff ff84 	bl	8002c8c <__errno>
 8002d84:	9b08      	ldr	r3, [sp, #32]
 8002d86:	6003      	str	r3, [r0, #0]
 8002d88:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	4649      	mov	r1, r9
 8002d90:	b00b      	add	sp, #44	; 0x2c
 8002d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d96:	2200      	movs	r2, #0
 8002d98:	2300      	movs	r3, #0
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f7fd fccd 	bl	800073c <__aeabi_ddiv>
 8002da2:	f1ba 0f02 	cmp.w	sl, #2
 8002da6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002daa:	d1e3      	bne.n	8002d74 <fmod+0x6c>
 8002dac:	f7ff ff6e 	bl	8002c8c <__errno>
 8002db0:	2321      	movs	r3, #33	; 0x21
 8002db2:	6003      	str	r3, [r0, #0]
 8002db4:	e7e2      	b.n	8002d7c <fmod+0x74>
 8002db6:	bf00      	nop
 8002db8:	2000007c 	.word	0x2000007c
 8002dbc:	08004070 	.word	0x08004070

08002dc0 <pow>:
 8002dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	b08f      	sub	sp, #60	; 0x3c
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4680      	mov	r8, r0
 8002dca:	4689      	mov	r9, r1
 8002dcc:	4614      	mov	r4, r2
 8002dce:	f000 fa5f 	bl	8003290 <__ieee754_pow>
 8002dd2:	4fa1      	ldr	r7, [pc, #644]	; (8003058 <pow+0x298>)
 8002dd4:	e9cd 0100 	strd	r0, r1, [sp]
 8002dd8:	f997 3000 	ldrsb.w	r3, [r7]
 8002ddc:	463e      	mov	r6, r7
 8002dde:	9302      	str	r3, [sp, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	d05f      	beq.n	8002ea4 <pow+0xe4>
 8002de4:	4622      	mov	r2, r4
 8002de6:	462b      	mov	r3, r5
 8002de8:	4620      	mov	r0, r4
 8002dea:	4629      	mov	r1, r5
 8002dec:	f7fd fe16 	bl	8000a1c <__aeabi_dcmpun>
 8002df0:	4682      	mov	sl, r0
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d156      	bne.n	8002ea4 <pow+0xe4>
 8002df6:	4642      	mov	r2, r8
 8002df8:	464b      	mov	r3, r9
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	f7fd fe0d 	bl	8000a1c <__aeabi_dcmpun>
 8002e02:	9003      	str	r0, [sp, #12]
 8002e04:	b1e8      	cbz	r0, 8002e42 <pow+0x82>
 8002e06:	2200      	movs	r2, #0
 8002e08:	2300      	movs	r3, #0
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f7fd fdd3 	bl	80009b8 <__aeabi_dcmpeq>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d046      	beq.n	8002ea4 <pow+0xe4>
 8002e16:	2301      	movs	r3, #1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	4b8f      	ldr	r3, [pc, #572]	; (800305c <pow+0x29c>)
 8002e1e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002e22:	9305      	str	r3, [sp, #20]
 8002e24:	4b8e      	ldr	r3, [pc, #568]	; (8003060 <pow+0x2a0>)
 8002e26:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002e2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002e2e:	9b02      	ldr	r3, [sp, #8]
 8002e30:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d031      	beq.n	8002e9c <pow+0xdc>
 8002e38:	a804      	add	r0, sp, #16
 8002e3a:	f000 ffe9 	bl	8003e10 <matherr>
 8002e3e:	bb38      	cbnz	r0, 8002e90 <pow+0xd0>
 8002e40:	e058      	b.n	8002ef4 <pow+0x134>
 8002e42:	f04f 0a00 	mov.w	sl, #0
 8002e46:	f04f 0b00 	mov.w	fp, #0
 8002e4a:	4652      	mov	r2, sl
 8002e4c:	465b      	mov	r3, fp
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd fdb1 	bl	80009b8 <__aeabi_dcmpeq>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d051      	beq.n	8002efe <pow+0x13e>
 8002e5a:	4652      	mov	r2, sl
 8002e5c:	465b      	mov	r3, fp
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4629      	mov	r1, r5
 8002e62:	f7fd fda9 	bl	80009b8 <__aeabi_dcmpeq>
 8002e66:	4606      	mov	r6, r0
 8002e68:	b308      	cbz	r0, 8002eae <pow+0xee>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	9304      	str	r3, [sp, #16]
 8002e6e:	4b7b      	ldr	r3, [pc, #492]	; (800305c <pow+0x29c>)
 8002e70:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002e74:	9305      	str	r3, [sp, #20]
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002e7c:	930c      	str	r3, [sp, #48]	; 0x30
 8002e7e:	9b02      	ldr	r3, [sp, #8]
 8002e80:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0d7      	beq.n	8002e38 <pow+0x78>
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4b75      	ldr	r3, [pc, #468]	; (8003060 <pow+0x2a0>)
 8002e8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e92:	b11b      	cbz	r3, 8002e9c <pow+0xdc>
 8002e94:	f7ff fefa 	bl	8002c8c <__errno>
 8002e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e9a:	6003      	str	r3, [r0, #0]
 8002e9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8002ea0:	e9cd 3400 	strd	r3, r4, [sp]
 8002ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ea8:	b00f      	add	sp, #60	; 0x3c
 8002eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f000 ffa7 	bl	8003e04 <finite>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d0f4      	beq.n	8002ea4 <pow+0xe4>
 8002eba:	4652      	mov	r2, sl
 8002ebc:	465b      	mov	r3, fp
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7fd fd83 	bl	80009cc <__aeabi_dcmplt>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d0ec      	beq.n	8002ea4 <pow+0xe4>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	9304      	str	r3, [sp, #16]
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <pow+0x29c>)
 8002ed0:	960c      	str	r6, [sp, #48]	; 0x30
 8002ed2:	9305      	str	r3, [sp, #20]
 8002ed4:	f997 3000 	ldrsb.w	r3, [r7]
 8002ed8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002edc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002ee0:	b913      	cbnz	r3, 8002ee8 <pow+0x128>
 8002ee2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002ee6:	e7a7      	b.n	8002e38 <pow+0x78>
 8002ee8:	2000      	movs	r0, #0
 8002eea:	495e      	ldr	r1, [pc, #376]	; (8003064 <pow+0x2a4>)
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002ef2:	d1a1      	bne.n	8002e38 <pow+0x78>
 8002ef4:	f7ff feca 	bl	8002c8c <__errno>
 8002ef8:	2321      	movs	r3, #33	; 0x21
 8002efa:	6003      	str	r3, [r0, #0]
 8002efc:	e7c8      	b.n	8002e90 <pow+0xd0>
 8002efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f02:	f000 ff7f 	bl	8003e04 <finite>
 8002f06:	9002      	str	r0, [sp, #8]
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d177      	bne.n	8002ffc <pow+0x23c>
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	4649      	mov	r1, r9
 8002f10:	f000 ff78 	bl	8003e04 <finite>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d071      	beq.n	8002ffc <pow+0x23c>
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f000 ff72 	bl	8003e04 <finite>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d06b      	beq.n	8002ffc <pow+0x23c>
 8002f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f7fd fd76 	bl	8000a1c <__aeabi_dcmpun>
 8002f30:	f997 7000 	ldrsb.w	r7, [r7]
 8002f34:	4b49      	ldr	r3, [pc, #292]	; (800305c <pow+0x29c>)
 8002f36:	b1a0      	cbz	r0, 8002f62 <pow+0x1a2>
 8002f38:	2201      	movs	r2, #1
 8002f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f3e:	9b02      	ldr	r3, [sp, #8]
 8002f40:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002f44:	930c      	str	r3, [sp, #48]	; 0x30
 8002f46:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002f4a:	2f00      	cmp	r7, #0
 8002f4c:	d0c9      	beq.n	8002ee2 <pow+0x122>
 8002f4e:	4652      	mov	r2, sl
 8002f50:	465b      	mov	r3, fp
 8002f52:	4650      	mov	r0, sl
 8002f54:	4659      	mov	r1, fp
 8002f56:	f7fd fbf1 	bl	800073c <__aeabi_ddiv>
 8002f5a:	2f02      	cmp	r7, #2
 8002f5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f60:	e7c7      	b.n	8002ef2 <pow+0x132>
 8002f62:	2203      	movs	r2, #3
 8002f64:	900c      	str	r0, [sp, #48]	; 0x30
 8002f66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <pow+0x2a8>)
 8002f72:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002f76:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002f7a:	f7fd fab5 	bl	80004e8 <__aeabi_dmul>
 8002f7e:	4604      	mov	r4, r0
 8002f80:	460d      	mov	r5, r1
 8002f82:	bb17      	cbnz	r7, 8002fca <pow+0x20a>
 8002f84:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002f88:	4b38      	ldr	r3, [pc, #224]	; (800306c <pow+0x2ac>)
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002f90:	4649      	mov	r1, r9
 8002f92:	4652      	mov	r2, sl
 8002f94:	465b      	mov	r3, fp
 8002f96:	f7fd fd19 	bl	80009cc <__aeabi_dcmplt>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d054      	beq.n	8003048 <pow+0x288>
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f000 ff3d 	bl	8003e20 <rint>
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	f7fd fd05 	bl	80009b8 <__aeabi_dcmpeq>
 8002fae:	b920      	cbnz	r0, 8002fba <pow+0x1fa>
 8002fb0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <pow+0x2b0>)
 8002fb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002fba:	f996 3000 	ldrsb.w	r3, [r6]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d142      	bne.n	8003048 <pow+0x288>
 8002fc2:	f7ff fe63 	bl	8002c8c <__errno>
 8002fc6:	2322      	movs	r3, #34	; 0x22
 8002fc8:	e797      	b.n	8002efa <pow+0x13a>
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <pow+0x2b4>)
 8002fce:	4640      	mov	r0, r8
 8002fd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	4652      	mov	r2, sl
 8002fd8:	465b      	mov	r3, fp
 8002fda:	f7fd fcf7 	bl	80009cc <__aeabi_dcmplt>
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d0eb      	beq.n	8002fba <pow+0x1fa>
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f000 ff1b 	bl	8003e20 <rint>
 8002fea:	4622      	mov	r2, r4
 8002fec:	462b      	mov	r3, r5
 8002fee:	f7fd fce3 	bl	80009b8 <__aeabi_dcmpeq>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d1e1      	bne.n	8002fba <pow+0x1fa>
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <pow+0x2a4>)
 8002ffa:	e7dc      	b.n	8002fb6 <pow+0x1f6>
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003002:	2300      	movs	r3, #0
 8003004:	f7fd fcd8 	bl	80009b8 <__aeabi_dcmpeq>
 8003008:	2800      	cmp	r0, #0
 800300a:	f43f af4b 	beq.w	8002ea4 <pow+0xe4>
 800300e:	4640      	mov	r0, r8
 8003010:	4649      	mov	r1, r9
 8003012:	f000 fef7 	bl	8003e04 <finite>
 8003016:	2800      	cmp	r0, #0
 8003018:	f43f af44 	beq.w	8002ea4 <pow+0xe4>
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f000 fef0 	bl	8003e04 <finite>
 8003024:	2800      	cmp	r0, #0
 8003026:	f43f af3d 	beq.w	8002ea4 <pow+0xe4>
 800302a:	2304      	movs	r3, #4
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <pow+0x29c>)
 8003030:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003034:	9305      	str	r3, [sp, #20]
 8003036:	2300      	movs	r3, #0
 8003038:	2400      	movs	r4, #0
 800303a:	930c      	str	r3, [sp, #48]	; 0x30
 800303c:	2300      	movs	r3, #0
 800303e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003042:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003046:	e7b8      	b.n	8002fba <pow+0x1fa>
 8003048:	a804      	add	r0, sp, #16
 800304a:	f000 fee1 	bl	8003e10 <matherr>
 800304e:	2800      	cmp	r0, #0
 8003050:	f47f af1e 	bne.w	8002e90 <pow+0xd0>
 8003054:	e7b5      	b.n	8002fc2 <pow+0x202>
 8003056:	bf00      	nop
 8003058:	2000007c 	.word	0x2000007c
 800305c:	08004075 	.word	0x08004075
 8003060:	3ff00000 	.word	0x3ff00000
 8003064:	fff00000 	.word	0xfff00000
 8003068:	3fe00000 	.word	0x3fe00000
 800306c:	47efffff 	.word	0x47efffff
 8003070:	c7efffff 	.word	0xc7efffff
 8003074:	7ff00000 	.word	0x7ff00000

08003078 <__ieee754_fmod>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003080:	4682      	mov	sl, r0
 8003082:	ea54 0002 	orrs.w	r0, r4, r2
 8003086:	461e      	mov	r6, r3
 8003088:	4694      	mov	ip, r2
 800308a:	4696      	mov	lr, r2
 800308c:	d00c      	beq.n	80030a8 <__ieee754_fmod+0x30>
 800308e:	4d78      	ldr	r5, [pc, #480]	; (8003270 <__ieee754_fmod+0x1f8>)
 8003090:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8003094:	45a8      	cmp	r8, r5
 8003096:	4689      	mov	r9, r1
 8003098:	dc06      	bgt.n	80030a8 <__ieee754_fmod+0x30>
 800309a:	4255      	negs	r5, r2
 800309c:	4315      	orrs	r5, r2
 800309e:	4f75      	ldr	r7, [pc, #468]	; (8003274 <__ieee754_fmod+0x1fc>)
 80030a0:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 80030a4:	42bd      	cmp	r5, r7
 80030a6:	d908      	bls.n	80030ba <__ieee754_fmod+0x42>
 80030a8:	4650      	mov	r0, sl
 80030aa:	f7fd fa1d 	bl	80004e8 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	f7fd fb43 	bl	800073c <__aeabi_ddiv>
 80030b6:	4682      	mov	sl, r0
 80030b8:	e00f      	b.n	80030da <__ieee754_fmod+0x62>
 80030ba:	45a0      	cmp	r8, r4
 80030bc:	4652      	mov	r2, sl
 80030be:	4657      	mov	r7, sl
 80030c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80030c4:	dc0c      	bgt.n	80030e0 <__ieee754_fmod+0x68>
 80030c6:	db08      	blt.n	80030da <__ieee754_fmod+0x62>
 80030c8:	45e2      	cmp	sl, ip
 80030ca:	d306      	bcc.n	80030da <__ieee754_fmod+0x62>
 80030cc:	d108      	bne.n	80030e0 <__ieee754_fmod+0x68>
 80030ce:	496a      	ldr	r1, [pc, #424]	; (8003278 <__ieee754_fmod+0x200>)
 80030d0:	0fed      	lsrs	r5, r5, #31
 80030d2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80030d6:	e9d5 a100 	ldrd	sl, r1, [r5]
 80030da:	4650      	mov	r0, sl
 80030dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e0:	4b66      	ldr	r3, [pc, #408]	; (800327c <__ieee754_fmod+0x204>)
 80030e2:	4598      	cmp	r8, r3
 80030e4:	dc48      	bgt.n	8003178 <__ieee754_fmod+0x100>
 80030e6:	f1b8 0f00 	cmp.w	r8, #0
 80030ea:	d13c      	bne.n	8003166 <__ieee754_fmod+0xee>
 80030ec:	4611      	mov	r1, r2
 80030ee:	4864      	ldr	r0, [pc, #400]	; (8003280 <__ieee754_fmod+0x208>)
 80030f0:	2900      	cmp	r1, #0
 80030f2:	dc35      	bgt.n	8003160 <__ieee754_fmod+0xe8>
 80030f4:	429c      	cmp	r4, r3
 80030f6:	dc4f      	bgt.n	8003198 <__ieee754_fmod+0x120>
 80030f8:	2c00      	cmp	r4, #0
 80030fa:	d145      	bne.n	8003188 <__ieee754_fmod+0x110>
 80030fc:	4661      	mov	r1, ip
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <__ieee754_fmod+0x208>)
 8003100:	2900      	cmp	r1, #0
 8003102:	dc3e      	bgt.n	8003182 <__ieee754_fmod+0x10a>
 8003104:	495f      	ldr	r1, [pc, #380]	; (8003284 <__ieee754_fmod+0x20c>)
 8003106:	4288      	cmp	r0, r1
 8003108:	db4a      	blt.n	80031a0 <__ieee754_fmod+0x128>
 800310a:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800310e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003112:	4a5c      	ldr	r2, [pc, #368]	; (8003284 <__ieee754_fmod+0x20c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	db57      	blt.n	80031c8 <__ieee754_fmod+0x150>
 8003118:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800311c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8003120:	1ac0      	subs	r0, r0, r3
 8003122:	1b8a      	subs	r2, r1, r6
 8003124:	eba7 040e 	sub.w	r4, r7, lr
 8003128:	2800      	cmp	r0, #0
 800312a:	d163      	bne.n	80031f4 <__ieee754_fmod+0x17c>
 800312c:	4577      	cmp	r7, lr
 800312e:	bf38      	it	cc
 8003130:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8003134:	2a00      	cmp	r2, #0
 8003136:	bfbc      	itt	lt
 8003138:	463c      	movlt	r4, r7
 800313a:	460a      	movlt	r2, r1
 800313c:	ea52 0104 	orrs.w	r1, r2, r4
 8003140:	d0c5      	beq.n	80030ce <__ieee754_fmod+0x56>
 8003142:	494e      	ldr	r1, [pc, #312]	; (800327c <__ieee754_fmod+0x204>)
 8003144:	428a      	cmp	r2, r1
 8003146:	dd6a      	ble.n	800321e <__ieee754_fmod+0x1a6>
 8003148:	494e      	ldr	r1, [pc, #312]	; (8003284 <__ieee754_fmod+0x20c>)
 800314a:	428b      	cmp	r3, r1
 800314c:	db6d      	blt.n	800322a <__ieee754_fmod+0x1b2>
 800314e:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8003152:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003156:	4315      	orrs	r5, r2
 8003158:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800315c:	4620      	mov	r0, r4
 800315e:	e7aa      	b.n	80030b6 <__ieee754_fmod+0x3e>
 8003160:	3801      	subs	r0, #1
 8003162:	0049      	lsls	r1, r1, #1
 8003164:	e7c4      	b.n	80030f0 <__ieee754_fmod+0x78>
 8003166:	4847      	ldr	r0, [pc, #284]	; (8003284 <__ieee754_fmod+0x20c>)
 8003168:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800316c:	0049      	lsls	r1, r1, #1
 800316e:	2900      	cmp	r1, #0
 8003170:	f100 30ff 	add.w	r0, r0, #4294967295
 8003174:	dcfa      	bgt.n	800316c <__ieee754_fmod+0xf4>
 8003176:	e7bd      	b.n	80030f4 <__ieee754_fmod+0x7c>
 8003178:	ea4f 5028 	mov.w	r0, r8, asr #20
 800317c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003180:	e7b8      	b.n	80030f4 <__ieee754_fmod+0x7c>
 8003182:	3b01      	subs	r3, #1
 8003184:	0049      	lsls	r1, r1, #1
 8003186:	e7bb      	b.n	8003100 <__ieee754_fmod+0x88>
 8003188:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <__ieee754_fmod+0x20c>)
 800318a:	02e1      	lsls	r1, r4, #11
 800318c:	0049      	lsls	r1, r1, #1
 800318e:	2900      	cmp	r1, #0
 8003190:	f103 33ff 	add.w	r3, r3, #4294967295
 8003194:	dcfa      	bgt.n	800318c <__ieee754_fmod+0x114>
 8003196:	e7b5      	b.n	8003104 <__ieee754_fmod+0x8c>
 8003198:	1523      	asrs	r3, r4, #20
 800319a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800319e:	e7b1      	b.n	8003104 <__ieee754_fmod+0x8c>
 80031a0:	1a0f      	subs	r7, r1, r0
 80031a2:	2f1f      	cmp	r7, #31
 80031a4:	dc0a      	bgt.n	80031bc <__ieee754_fmod+0x144>
 80031a6:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 80031aa:	fa08 f807 	lsl.w	r8, r8, r7
 80031ae:	fa22 f101 	lsr.w	r1, r2, r1
 80031b2:	ea41 0108 	orr.w	r1, r1, r8
 80031b6:	fa02 f707 	lsl.w	r7, r2, r7
 80031ba:	e7aa      	b.n	8003112 <__ieee754_fmod+0x9a>
 80031bc:	4932      	ldr	r1, [pc, #200]	; (8003288 <__ieee754_fmod+0x210>)
 80031be:	2700      	movs	r7, #0
 80031c0:	1a09      	subs	r1, r1, r0
 80031c2:	fa02 f101 	lsl.w	r1, r2, r1
 80031c6:	e7a4      	b.n	8003112 <__ieee754_fmod+0x9a>
 80031c8:	eba2 0e03 	sub.w	lr, r2, r3
 80031cc:	f1be 0f1f 	cmp.w	lr, #31
 80031d0:	dc09      	bgt.n	80031e6 <__ieee754_fmod+0x16e>
 80031d2:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80031d6:	fa04 f40e 	lsl.w	r4, r4, lr
 80031da:	fa2c f606 	lsr.w	r6, ip, r6
 80031de:	4326      	orrs	r6, r4
 80031e0:	fa0c fe0e 	lsl.w	lr, ip, lr
 80031e4:	e79c      	b.n	8003120 <__ieee754_fmod+0xa8>
 80031e6:	4e28      	ldr	r6, [pc, #160]	; (8003288 <__ieee754_fmod+0x210>)
 80031e8:	f04f 0e00 	mov.w	lr, #0
 80031ec:	1af6      	subs	r6, r6, r3
 80031ee:	fa0c f606 	lsl.w	r6, ip, r6
 80031f2:	e795      	b.n	8003120 <__ieee754_fmod+0xa8>
 80031f4:	4577      	cmp	r7, lr
 80031f6:	bf38      	it	cc
 80031f8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	da05      	bge.n	800320c <__ieee754_fmod+0x194>
 8003200:	0ffa      	lsrs	r2, r7, #31
 8003202:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003206:	007f      	lsls	r7, r7, #1
 8003208:	3801      	subs	r0, #1
 800320a:	e78a      	b.n	8003122 <__ieee754_fmod+0xaa>
 800320c:	ea52 0104 	orrs.w	r1, r2, r4
 8003210:	f43f af5d 	beq.w	80030ce <__ieee754_fmod+0x56>
 8003214:	0fe1      	lsrs	r1, r4, #31
 8003216:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800321a:	0067      	lsls	r7, r4, #1
 800321c:	e7f4      	b.n	8003208 <__ieee754_fmod+0x190>
 800321e:	0fe0      	lsrs	r0, r4, #31
 8003220:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003224:	0064      	lsls	r4, r4, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	e78c      	b.n	8003144 <__ieee754_fmod+0xcc>
 800322a:	1ac9      	subs	r1, r1, r3
 800322c:	2914      	cmp	r1, #20
 800322e:	dc0a      	bgt.n	8003246 <__ieee754_fmod+0x1ce>
 8003230:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	40cc      	lsrs	r4, r1
 800323a:	4323      	orrs	r3, r4
 800323c:	410a      	asrs	r2, r1
 800323e:	ea42 0105 	orr.w	r1, r2, r5
 8003242:	4618      	mov	r0, r3
 8003244:	e737      	b.n	80030b6 <__ieee754_fmod+0x3e>
 8003246:	291f      	cmp	r1, #31
 8003248:	dc07      	bgt.n	800325a <__ieee754_fmod+0x1e2>
 800324a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800324e:	40cc      	lsrs	r4, r1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	4323      	orrs	r3, r4
 8003256:	462a      	mov	r2, r5
 8003258:	e7f1      	b.n	800323e <__ieee754_fmod+0x1c6>
 800325a:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800325e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8003262:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8003266:	33e2      	adds	r3, #226	; 0xe2
 8003268:	fa42 f303 	asr.w	r3, r2, r3
 800326c:	e7f3      	b.n	8003256 <__ieee754_fmod+0x1de>
 800326e:	bf00      	nop
 8003270:	7fefffff 	.word	0x7fefffff
 8003274:	7ff00000 	.word	0x7ff00000
 8003278:	08004080 	.word	0x08004080
 800327c:	000fffff 	.word	0x000fffff
 8003280:	fffffbed 	.word	0xfffffbed
 8003284:	fffffc02 	.word	0xfffffc02
 8003288:	fffffbe2 	.word	0xfffffbe2
 800328c:	00000000 	.word	0x00000000

08003290 <__ieee754_pow>:
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	b091      	sub	sp, #68	; 0x44
 8003296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800329a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800329e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80032a2:	ea55 0302 	orrs.w	r3, r5, r2
 80032a6:	4607      	mov	r7, r0
 80032a8:	4688      	mov	r8, r1
 80032aa:	f000 84b7 	beq.w	8003c1c <__ieee754_pow+0x98c>
 80032ae:	4b80      	ldr	r3, [pc, #512]	; (80034b0 <__ieee754_pow+0x220>)
 80032b0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80032b4:	429c      	cmp	r4, r3
 80032b6:	4689      	mov	r9, r1
 80032b8:	4682      	mov	sl, r0
 80032ba:	dc09      	bgt.n	80032d0 <__ieee754_pow+0x40>
 80032bc:	d103      	bne.n	80032c6 <__ieee754_pow+0x36>
 80032be:	b938      	cbnz	r0, 80032d0 <__ieee754_pow+0x40>
 80032c0:	42a5      	cmp	r5, r4
 80032c2:	dc0d      	bgt.n	80032e0 <__ieee754_pow+0x50>
 80032c4:	e001      	b.n	80032ca <__ieee754_pow+0x3a>
 80032c6:	429d      	cmp	r5, r3
 80032c8:	dc02      	bgt.n	80032d0 <__ieee754_pow+0x40>
 80032ca:	429d      	cmp	r5, r3
 80032cc:	d10e      	bne.n	80032ec <__ieee754_pow+0x5c>
 80032ce:	b16a      	cbz	r2, 80032ec <__ieee754_pow+0x5c>
 80032d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80032d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80032d8:	ea54 030a 	orrs.w	r3, r4, sl
 80032dc:	f000 849e 	beq.w	8003c1c <__ieee754_pow+0x98c>
 80032e0:	4874      	ldr	r0, [pc, #464]	; (80034b4 <__ieee754_pow+0x224>)
 80032e2:	b011      	add	sp, #68	; 0x44
 80032e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e8:	f000 bd94 	b.w	8003e14 <nan>
 80032ec:	f1b9 0f00 	cmp.w	r9, #0
 80032f0:	da53      	bge.n	800339a <__ieee754_pow+0x10a>
 80032f2:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <__ieee754_pow+0x228>)
 80032f4:	429d      	cmp	r5, r3
 80032f6:	dc4e      	bgt.n	8003396 <__ieee754_pow+0x106>
 80032f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80032fc:	429d      	cmp	r5, r3
 80032fe:	dd4c      	ble.n	800339a <__ieee754_pow+0x10a>
 8003300:	152b      	asrs	r3, r5, #20
 8003302:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003306:	2b14      	cmp	r3, #20
 8003308:	dd28      	ble.n	800335c <__ieee754_pow+0xcc>
 800330a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800330e:	fa22 f103 	lsr.w	r1, r2, r3
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	4293      	cmp	r3, r2
 8003318:	d13f      	bne.n	800339a <__ieee754_pow+0x10a>
 800331a:	f001 0101 	and.w	r1, r1, #1
 800331e:	f1c1 0302 	rsb	r3, r1, #2
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2a00      	cmp	r2, #0
 8003326:	d15c      	bne.n	80033e2 <__ieee754_pow+0x152>
 8003328:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <__ieee754_pow+0x220>)
 800332a:	429d      	cmp	r5, r3
 800332c:	d126      	bne.n	800337c <__ieee754_pow+0xec>
 800332e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003332:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003336:	ea53 030a 	orrs.w	r3, r3, sl
 800333a:	f000 846f 	beq.w	8003c1c <__ieee754_pow+0x98c>
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <__ieee754_pow+0x22c>)
 8003340:	429c      	cmp	r4, r3
 8003342:	dd2c      	ble.n	800339e <__ieee754_pow+0x10e>
 8003344:	2e00      	cmp	r6, #0
 8003346:	f280 846f 	bge.w	8003c28 <__ieee754_pow+0x998>
 800334a:	f04f 0b00 	mov.w	fp, #0
 800334e:	f04f 0c00 	mov.w	ip, #0
 8003352:	4658      	mov	r0, fp
 8003354:	4661      	mov	r1, ip
 8003356:	b011      	add	sp, #68	; 0x44
 8003358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335c:	2a00      	cmp	r2, #0
 800335e:	d13e      	bne.n	80033de <__ieee754_pow+0x14e>
 8003360:	f1c3 0314 	rsb	r3, r3, #20
 8003364:	fa45 f103 	asr.w	r1, r5, r3
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	42ab      	cmp	r3, r5
 800336e:	f040 8463 	bne.w	8003c38 <__ieee754_pow+0x9a8>
 8003372:	f001 0101 	and.w	r1, r1, #1
 8003376:	f1c1 0302 	rsb	r3, r1, #2
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4b50      	ldr	r3, [pc, #320]	; (80034c0 <__ieee754_pow+0x230>)
 800337e:	429d      	cmp	r5, r3
 8003380:	d114      	bne.n	80033ac <__ieee754_pow+0x11c>
 8003382:	2e00      	cmp	r6, #0
 8003384:	f280 8454 	bge.w	8003c30 <__ieee754_pow+0x9a0>
 8003388:	463a      	mov	r2, r7
 800338a:	4643      	mov	r3, r8
 800338c:	2000      	movs	r0, #0
 800338e:	494c      	ldr	r1, [pc, #304]	; (80034c0 <__ieee754_pow+0x230>)
 8003390:	f7fd f9d4 	bl	800073c <__aeabi_ddiv>
 8003394:	e013      	b.n	80033be <__ieee754_pow+0x12e>
 8003396:	2302      	movs	r3, #2
 8003398:	e7c3      	b.n	8003322 <__ieee754_pow+0x92>
 800339a:	2300      	movs	r3, #0
 800339c:	e7c1      	b.n	8003322 <__ieee754_pow+0x92>
 800339e:	2e00      	cmp	r6, #0
 80033a0:	dad3      	bge.n	800334a <__ieee754_pow+0xba>
 80033a2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80033a6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80033aa:	e7d2      	b.n	8003352 <__ieee754_pow+0xc2>
 80033ac:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80033b0:	d108      	bne.n	80033c4 <__ieee754_pow+0x134>
 80033b2:	463a      	mov	r2, r7
 80033b4:	4643      	mov	r3, r8
 80033b6:	4638      	mov	r0, r7
 80033b8:	4641      	mov	r1, r8
 80033ba:	f7fd f895 	bl	80004e8 <__aeabi_dmul>
 80033be:	4683      	mov	fp, r0
 80033c0:	468c      	mov	ip, r1
 80033c2:	e7c6      	b.n	8003352 <__ieee754_pow+0xc2>
 80033c4:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <__ieee754_pow+0x234>)
 80033c6:	429e      	cmp	r6, r3
 80033c8:	d10b      	bne.n	80033e2 <__ieee754_pow+0x152>
 80033ca:	f1b9 0f00 	cmp.w	r9, #0
 80033ce:	db08      	blt.n	80033e2 <__ieee754_pow+0x152>
 80033d0:	4638      	mov	r0, r7
 80033d2:	4641      	mov	r1, r8
 80033d4:	b011      	add	sp, #68	; 0x44
 80033d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033da:	f000 bc63 	b.w	8003ca4 <__ieee754_sqrt>
 80033de:	2300      	movs	r3, #0
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	4638      	mov	r0, r7
 80033e4:	4641      	mov	r1, r8
 80033e6:	f000 fd09 	bl	8003dfc <fabs>
 80033ea:	4683      	mov	fp, r0
 80033ec:	468c      	mov	ip, r1
 80033ee:	f1ba 0f00 	cmp.w	sl, #0
 80033f2:	d12b      	bne.n	800344c <__ieee754_pow+0x1bc>
 80033f4:	b124      	cbz	r4, 8003400 <__ieee754_pow+0x170>
 80033f6:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <__ieee754_pow+0x230>)
 80033f8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d125      	bne.n	800344c <__ieee754_pow+0x1bc>
 8003400:	2e00      	cmp	r6, #0
 8003402:	da07      	bge.n	8003414 <__ieee754_pow+0x184>
 8003404:	465a      	mov	r2, fp
 8003406:	4663      	mov	r3, ip
 8003408:	2000      	movs	r0, #0
 800340a:	492d      	ldr	r1, [pc, #180]	; (80034c0 <__ieee754_pow+0x230>)
 800340c:	f7fd f996 	bl	800073c <__aeabi_ddiv>
 8003410:	4683      	mov	fp, r0
 8003412:	468c      	mov	ip, r1
 8003414:	f1b9 0f00 	cmp.w	r9, #0
 8003418:	da9b      	bge.n	8003352 <__ieee754_pow+0xc2>
 800341a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800341e:	9b00      	ldr	r3, [sp, #0]
 8003420:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003424:	4323      	orrs	r3, r4
 8003426:	d108      	bne.n	800343a <__ieee754_pow+0x1aa>
 8003428:	465a      	mov	r2, fp
 800342a:	4663      	mov	r3, ip
 800342c:	4658      	mov	r0, fp
 800342e:	4661      	mov	r1, ip
 8003430:	f7fc fea2 	bl	8000178 <__aeabi_dsub>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	e7aa      	b.n	8003390 <__ieee754_pow+0x100>
 800343a:	9b00      	ldr	r3, [sp, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d188      	bne.n	8003352 <__ieee754_pow+0xc2>
 8003440:	4658      	mov	r0, fp
 8003442:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003446:	4683      	mov	fp, r0
 8003448:	469c      	mov	ip, r3
 800344a:	e782      	b.n	8003352 <__ieee754_pow+0xc2>
 800344c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8003450:	f109 33ff 	add.w	r3, r9, #4294967295
 8003454:	930d      	str	r3, [sp, #52]	; 0x34
 8003456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003458:	9b00      	ldr	r3, [sp, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	d104      	bne.n	8003468 <__ieee754_pow+0x1d8>
 800345e:	463a      	mov	r2, r7
 8003460:	4643      	mov	r3, r8
 8003462:	4638      	mov	r0, r7
 8003464:	4641      	mov	r1, r8
 8003466:	e7e3      	b.n	8003430 <__ieee754_pow+0x1a0>
 8003468:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <__ieee754_pow+0x238>)
 800346a:	429d      	cmp	r5, r3
 800346c:	f340 80fe 	ble.w	800366c <__ieee754_pow+0x3dc>
 8003470:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003474:	429d      	cmp	r5, r3
 8003476:	dd0b      	ble.n	8003490 <__ieee754_pow+0x200>
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <__ieee754_pow+0x22c>)
 800347a:	429c      	cmp	r4, r3
 800347c:	dc0e      	bgt.n	800349c <__ieee754_pow+0x20c>
 800347e:	2e00      	cmp	r6, #0
 8003480:	f6bf af63 	bge.w	800334a <__ieee754_pow+0xba>
 8003484:	a308      	add	r3, pc, #32	; (adr r3, 80034a8 <__ieee754_pow+0x218>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	e794      	b.n	80033ba <__ieee754_pow+0x12a>
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <__ieee754_pow+0x23c>)
 8003492:	429c      	cmp	r4, r3
 8003494:	ddf3      	ble.n	800347e <__ieee754_pow+0x1ee>
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <__ieee754_pow+0x230>)
 8003498:	429c      	cmp	r4, r3
 800349a:	dd19      	ble.n	80034d0 <__ieee754_pow+0x240>
 800349c:	2e00      	cmp	r6, #0
 800349e:	dcf1      	bgt.n	8003484 <__ieee754_pow+0x1f4>
 80034a0:	e753      	b.n	800334a <__ieee754_pow+0xba>
 80034a2:	bf00      	nop
 80034a4:	f3af 8000 	nop.w
 80034a8:	8800759c 	.word	0x8800759c
 80034ac:	7e37e43c 	.word	0x7e37e43c
 80034b0:	7ff00000 	.word	0x7ff00000
 80034b4:	08004074 	.word	0x08004074
 80034b8:	433fffff 	.word	0x433fffff
 80034bc:	3fefffff 	.word	0x3fefffff
 80034c0:	3ff00000 	.word	0x3ff00000
 80034c4:	3fe00000 	.word	0x3fe00000
 80034c8:	41e00000 	.word	0x41e00000
 80034cc:	3feffffe 	.word	0x3feffffe
 80034d0:	4661      	mov	r1, ip
 80034d2:	2200      	movs	r2, #0
 80034d4:	4b60      	ldr	r3, [pc, #384]	; (8003658 <__ieee754_pow+0x3c8>)
 80034d6:	4658      	mov	r0, fp
 80034d8:	f7fc fe4e 	bl	8000178 <__aeabi_dsub>
 80034dc:	a354      	add	r3, pc, #336	; (adr r3, 8003630 <__ieee754_pow+0x3a0>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	4604      	mov	r4, r0
 80034e4:	460d      	mov	r5, r1
 80034e6:	f7fc ffff 	bl	80004e8 <__aeabi_dmul>
 80034ea:	a353      	add	r3, pc, #332	; (adr r3, 8003638 <__ieee754_pow+0x3a8>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	4606      	mov	r6, r0
 80034f2:	460f      	mov	r7, r1
 80034f4:	4620      	mov	r0, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	f7fc fff6 	bl	80004e8 <__aeabi_dmul>
 80034fc:	2200      	movs	r2, #0
 80034fe:	4682      	mov	sl, r0
 8003500:	468b      	mov	fp, r1
 8003502:	4b56      	ldr	r3, [pc, #344]	; (800365c <__ieee754_pow+0x3cc>)
 8003504:	4620      	mov	r0, r4
 8003506:	4629      	mov	r1, r5
 8003508:	f7fc ffee 	bl	80004e8 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	a14b      	add	r1, pc, #300	; (adr r1, 8003640 <__ieee754_pow+0x3b0>)
 8003512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003516:	f7fc fe2f 	bl	8000178 <__aeabi_dsub>
 800351a:	4622      	mov	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	f7fc ffe3 	bl	80004e8 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	2000      	movs	r0, #0
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <__ieee754_pow+0x3d0>)
 800352a:	f7fc fe25 	bl	8000178 <__aeabi_dsub>
 800352e:	4622      	mov	r2, r4
 8003530:	462b      	mov	r3, r5
 8003532:	4680      	mov	r8, r0
 8003534:	4689      	mov	r9, r1
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fc ffd5 	bl	80004e8 <__aeabi_dmul>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4640      	mov	r0, r8
 8003544:	4649      	mov	r1, r9
 8003546:	f7fc ffcf 	bl	80004e8 <__aeabi_dmul>
 800354a:	a33f      	add	r3, pc, #252	; (adr r3, 8003648 <__ieee754_pow+0x3b8>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f7fc ffca 	bl	80004e8 <__aeabi_dmul>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4650      	mov	r0, sl
 800355a:	4659      	mov	r1, fp
 800355c:	f7fc fe0c 	bl	8000178 <__aeabi_dsub>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4604      	mov	r4, r0
 8003566:	460d      	mov	r5, r1
 8003568:	4630      	mov	r0, r6
 800356a:	4639      	mov	r1, r7
 800356c:	f7fc fe06 	bl	800017c <__adddf3>
 8003570:	2000      	movs	r0, #0
 8003572:	468b      	mov	fp, r1
 8003574:	4682      	mov	sl, r0
 8003576:	4632      	mov	r2, r6
 8003578:	463b      	mov	r3, r7
 800357a:	f7fc fdfd 	bl	8000178 <__aeabi_dsub>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4620      	mov	r0, r4
 8003584:	4629      	mov	r1, r5
 8003586:	f7fc fdf7 	bl	8000178 <__aeabi_dsub>
 800358a:	9b00      	ldr	r3, [sp, #0]
 800358c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800358e:	3b01      	subs	r3, #1
 8003590:	4313      	orrs	r3, r2
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	4c32      	ldreq	r4, [pc, #200]	; (8003664 <__ieee754_pow+0x3d4>)
 800359a:	4c2f      	ldrne	r4, [pc, #188]	; (8003658 <__ieee754_pow+0x3c8>)
 800359c:	4606      	mov	r6, r0
 800359e:	e9cd 3400 	strd	r3, r4, [sp]
 80035a2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80035a6:	2400      	movs	r4, #0
 80035a8:	460f      	mov	r7, r1
 80035aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035ae:	4622      	mov	r2, r4
 80035b0:	462b      	mov	r3, r5
 80035b2:	f7fc fde1 	bl	8000178 <__aeabi_dsub>
 80035b6:	4652      	mov	r2, sl
 80035b8:	465b      	mov	r3, fp
 80035ba:	f7fc ff95 	bl	80004e8 <__aeabi_dmul>
 80035be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035c2:	4680      	mov	r8, r0
 80035c4:	4689      	mov	r9, r1
 80035c6:	4630      	mov	r0, r6
 80035c8:	4639      	mov	r1, r7
 80035ca:	f7fc ff8d 	bl	80004e8 <__aeabi_dmul>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4640      	mov	r0, r8
 80035d4:	4649      	mov	r1, r9
 80035d6:	f7fc fdd1 	bl	800017c <__adddf3>
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	4680      	mov	r8, r0
 80035e0:	4689      	mov	r9, r1
 80035e2:	4650      	mov	r0, sl
 80035e4:	4659      	mov	r1, fp
 80035e6:	f7fc ff7f 	bl	80004e8 <__aeabi_dmul>
 80035ea:	4604      	mov	r4, r0
 80035ec:	460d      	mov	r5, r1
 80035ee:	460b      	mov	r3, r1
 80035f0:	4602      	mov	r2, r0
 80035f2:	4649      	mov	r1, r9
 80035f4:	4640      	mov	r0, r8
 80035f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80035fa:	f7fc fdbf 	bl	800017c <__adddf3>
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <__ieee754_pow+0x3d8>)
 8003600:	4682      	mov	sl, r0
 8003602:	4299      	cmp	r1, r3
 8003604:	460f      	mov	r7, r1
 8003606:	460e      	mov	r6, r1
 8003608:	f340 82e1 	ble.w	8003bce <__ieee754_pow+0x93e>
 800360c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003610:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003614:	4303      	orrs	r3, r0
 8003616:	f000 81db 	beq.w	80039d0 <__ieee754_pow+0x740>
 800361a:	a30d      	add	r3, pc, #52	; (adr r3, 8003650 <__ieee754_pow+0x3c0>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003624:	f7fc ff60 	bl	80004e8 <__aeabi_dmul>
 8003628:	a309      	add	r3, pc, #36	; (adr r3, 8003650 <__ieee754_pow+0x3c0>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	e6c4      	b.n	80033ba <__ieee754_pow+0x12a>
 8003630:	60000000 	.word	0x60000000
 8003634:	3ff71547 	.word	0x3ff71547
 8003638:	f85ddf44 	.word	0xf85ddf44
 800363c:	3e54ae0b 	.word	0x3e54ae0b
 8003640:	55555555 	.word	0x55555555
 8003644:	3fd55555 	.word	0x3fd55555
 8003648:	652b82fe 	.word	0x652b82fe
 800364c:	3ff71547 	.word	0x3ff71547
 8003650:	8800759c 	.word	0x8800759c
 8003654:	7e37e43c 	.word	0x7e37e43c
 8003658:	3ff00000 	.word	0x3ff00000
 800365c:	3fd00000 	.word	0x3fd00000
 8003660:	3fe00000 	.word	0x3fe00000
 8003664:	bff00000 	.word	0xbff00000
 8003668:	408fffff 	.word	0x408fffff
 800366c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	da08      	bge.n	8003688 <__ieee754_pow+0x3f8>
 8003676:	4658      	mov	r0, fp
 8003678:	4bcd      	ldr	r3, [pc, #820]	; (80039b0 <__ieee754_pow+0x720>)
 800367a:	4661      	mov	r1, ip
 800367c:	f7fc ff34 	bl	80004e8 <__aeabi_dmul>
 8003680:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003684:	4683      	mov	fp, r0
 8003686:	460c      	mov	r4, r1
 8003688:	1523      	asrs	r3, r4, #20
 800368a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800368e:	4413      	add	r3, r2
 8003690:	930c      	str	r3, [sp, #48]	; 0x30
 8003692:	4bc8      	ldr	r3, [pc, #800]	; (80039b4 <__ieee754_pow+0x724>)
 8003694:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003698:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800369c:	429c      	cmp	r4, r3
 800369e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80036a2:	dd08      	ble.n	80036b6 <__ieee754_pow+0x426>
 80036a4:	4bc4      	ldr	r3, [pc, #784]	; (80039b8 <__ieee754_pow+0x728>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	f340 815b 	ble.w	8003962 <__ieee754_pow+0x6d2>
 80036ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80036b2:	3301      	adds	r3, #1
 80036b4:	930c      	str	r3, [sp, #48]	; 0x30
 80036b6:	f04f 0800 	mov.w	r8, #0
 80036ba:	4658      	mov	r0, fp
 80036bc:	4629      	mov	r1, r5
 80036be:	4bbf      	ldr	r3, [pc, #764]	; (80039bc <__ieee754_pow+0x72c>)
 80036c0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80036c4:	444b      	add	r3, r9
 80036c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4623      	mov	r3, r4
 80036d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80036d6:	f7fc fd4f 	bl	8000178 <__aeabi_dsub>
 80036da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80036de:	4606      	mov	r6, r0
 80036e0:	460f      	mov	r7, r1
 80036e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80036e6:	f7fc fd49 	bl	800017c <__adddf3>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	2000      	movs	r0, #0
 80036f0:	49b3      	ldr	r1, [pc, #716]	; (80039c0 <__ieee754_pow+0x730>)
 80036f2:	f7fd f823 	bl	800073c <__aeabi_ddiv>
 80036f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4630      	mov	r0, r6
 8003700:	4639      	mov	r1, r7
 8003702:	f7fc fef1 	bl	80004e8 <__aeabi_dmul>
 8003706:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800370a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800370e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003712:	2300      	movs	r3, #0
 8003714:	2200      	movs	r2, #0
 8003716:	106d      	asrs	r5, r5, #1
 8003718:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800371c:	9304      	str	r3, [sp, #16]
 800371e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003722:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003726:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800372a:	4650      	mov	r0, sl
 800372c:	4659      	mov	r1, fp
 800372e:	4614      	mov	r4, r2
 8003730:	461d      	mov	r5, r3
 8003732:	f7fc fed9 	bl	80004e8 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4630      	mov	r0, r6
 800373c:	4639      	mov	r1, r7
 800373e:	f7fc fd1b 	bl	8000178 <__aeabi_dsub>
 8003742:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003746:	4606      	mov	r6, r0
 8003748:	460f      	mov	r7, r1
 800374a:	4620      	mov	r0, r4
 800374c:	4629      	mov	r1, r5
 800374e:	f7fc fd13 	bl	8000178 <__aeabi_dsub>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800375a:	f7fc fd0d 	bl	8000178 <__aeabi_dsub>
 800375e:	4652      	mov	r2, sl
 8003760:	465b      	mov	r3, fp
 8003762:	f7fc fec1 	bl	80004e8 <__aeabi_dmul>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4630      	mov	r0, r6
 800376c:	4639      	mov	r1, r7
 800376e:	f7fc fd03 	bl	8000178 <__aeabi_dsub>
 8003772:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003776:	f7fc feb7 	bl	80004e8 <__aeabi_dmul>
 800377a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800377e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f7fc feaf 	bl	80004e8 <__aeabi_dmul>
 800378a:	a377      	add	r3, pc, #476	; (adr r3, 8003968 <__ieee754_pow+0x6d8>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	4604      	mov	r4, r0
 8003792:	460d      	mov	r5, r1
 8003794:	f7fc fea8 	bl	80004e8 <__aeabi_dmul>
 8003798:	a375      	add	r3, pc, #468	; (adr r3, 8003970 <__ieee754_pow+0x6e0>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc fced 	bl	800017c <__adddf3>
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	f7fc fe9f 	bl	80004e8 <__aeabi_dmul>
 80037aa:	a373      	add	r3, pc, #460	; (adr r3, 8003978 <__ieee754_pow+0x6e8>)
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f7fc fce4 	bl	800017c <__adddf3>
 80037b4:	4622      	mov	r2, r4
 80037b6:	462b      	mov	r3, r5
 80037b8:	f7fc fe96 	bl	80004e8 <__aeabi_dmul>
 80037bc:	a370      	add	r3, pc, #448	; (adr r3, 8003980 <__ieee754_pow+0x6f0>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f7fc fcdb 	bl	800017c <__adddf3>
 80037c6:	4622      	mov	r2, r4
 80037c8:	462b      	mov	r3, r5
 80037ca:	f7fc fe8d 	bl	80004e8 <__aeabi_dmul>
 80037ce:	a36e      	add	r3, pc, #440	; (adr r3, 8003988 <__ieee754_pow+0x6f8>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f7fc fcd2 	bl	800017c <__adddf3>
 80037d8:	4622      	mov	r2, r4
 80037da:	462b      	mov	r3, r5
 80037dc:	f7fc fe84 	bl	80004e8 <__aeabi_dmul>
 80037e0:	a36b      	add	r3, pc, #428	; (adr r3, 8003990 <__ieee754_pow+0x700>)
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f7fc fcc9 	bl	800017c <__adddf3>
 80037ea:	4622      	mov	r2, r4
 80037ec:	4606      	mov	r6, r0
 80037ee:	460f      	mov	r7, r1
 80037f0:	462b      	mov	r3, r5
 80037f2:	4620      	mov	r0, r4
 80037f4:	4629      	mov	r1, r5
 80037f6:	f7fc fe77 	bl	80004e8 <__aeabi_dmul>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4630      	mov	r0, r6
 8003800:	4639      	mov	r1, r7
 8003802:	f7fc fe71 	bl	80004e8 <__aeabi_dmul>
 8003806:	4604      	mov	r4, r0
 8003808:	460d      	mov	r5, r1
 800380a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800380e:	4652      	mov	r2, sl
 8003810:	465b      	mov	r3, fp
 8003812:	f7fc fcb3 	bl	800017c <__adddf3>
 8003816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800381a:	f7fc fe65 	bl	80004e8 <__aeabi_dmul>
 800381e:	4622      	mov	r2, r4
 8003820:	462b      	mov	r3, r5
 8003822:	f7fc fcab 	bl	800017c <__adddf3>
 8003826:	4652      	mov	r2, sl
 8003828:	4606      	mov	r6, r0
 800382a:	460f      	mov	r7, r1
 800382c:	465b      	mov	r3, fp
 800382e:	4650      	mov	r0, sl
 8003830:	4659      	mov	r1, fp
 8003832:	f7fc fe59 	bl	80004e8 <__aeabi_dmul>
 8003836:	2200      	movs	r2, #0
 8003838:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <__ieee754_pow+0x734>)
 800383a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800383e:	f7fc fc9d 	bl	800017c <__adddf3>
 8003842:	4632      	mov	r2, r6
 8003844:	463b      	mov	r3, r7
 8003846:	f7fc fc99 	bl	800017c <__adddf3>
 800384a:	9804      	ldr	r0, [sp, #16]
 800384c:	460d      	mov	r5, r1
 800384e:	4604      	mov	r4, r0
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4650      	mov	r0, sl
 8003856:	4659      	mov	r1, fp
 8003858:	f7fc fe46 	bl	80004e8 <__aeabi_dmul>
 800385c:	2200      	movs	r2, #0
 800385e:	4682      	mov	sl, r0
 8003860:	468b      	mov	fp, r1
 8003862:	4b58      	ldr	r3, [pc, #352]	; (80039c4 <__ieee754_pow+0x734>)
 8003864:	4620      	mov	r0, r4
 8003866:	4629      	mov	r1, r5
 8003868:	f7fc fc86 	bl	8000178 <__aeabi_dsub>
 800386c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003870:	f7fc fc82 	bl	8000178 <__aeabi_dsub>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4630      	mov	r0, r6
 800387a:	4639      	mov	r1, r7
 800387c:	f7fc fc7c 	bl	8000178 <__aeabi_dsub>
 8003880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003884:	f7fc fe30 	bl	80004e8 <__aeabi_dmul>
 8003888:	4622      	mov	r2, r4
 800388a:	4606      	mov	r6, r0
 800388c:	460f      	mov	r7, r1
 800388e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003892:	462b      	mov	r3, r5
 8003894:	f7fc fe28 	bl	80004e8 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4630      	mov	r0, r6
 800389e:	4639      	mov	r1, r7
 80038a0:	f7fc fc6c 	bl	800017c <__adddf3>
 80038a4:	4606      	mov	r6, r0
 80038a6:	460f      	mov	r7, r1
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4650      	mov	r0, sl
 80038ae:	4659      	mov	r1, fp
 80038b0:	f7fc fc64 	bl	800017c <__adddf3>
 80038b4:	a338      	add	r3, pc, #224	; (adr r3, 8003998 <__ieee754_pow+0x708>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	9804      	ldr	r0, [sp, #16]
 80038bc:	460d      	mov	r5, r1
 80038be:	4604      	mov	r4, r0
 80038c0:	f7fc fe12 	bl	80004e8 <__aeabi_dmul>
 80038c4:	4652      	mov	r2, sl
 80038c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80038ca:	465b      	mov	r3, fp
 80038cc:	4620      	mov	r0, r4
 80038ce:	4629      	mov	r1, r5
 80038d0:	f7fc fc52 	bl	8000178 <__aeabi_dsub>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4630      	mov	r0, r6
 80038da:	4639      	mov	r1, r7
 80038dc:	f7fc fc4c 	bl	8000178 <__aeabi_dsub>
 80038e0:	a32f      	add	r3, pc, #188	; (adr r3, 80039a0 <__ieee754_pow+0x710>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f7fc fdff 	bl	80004e8 <__aeabi_dmul>
 80038ea:	a32f      	add	r3, pc, #188	; (adr r3, 80039a8 <__ieee754_pow+0x718>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	4606      	mov	r6, r0
 80038f2:	460f      	mov	r7, r1
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7fc fdf6 	bl	80004e8 <__aeabi_dmul>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4630      	mov	r0, r6
 8003902:	4639      	mov	r1, r7
 8003904:	f7fc fc3a 	bl	800017c <__adddf3>
 8003908:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <__ieee754_pow+0x738>)
 800390a:	444b      	add	r3, r9
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f7fc fc34 	bl	800017c <__adddf3>
 8003914:	4604      	mov	r4, r0
 8003916:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003918:	460d      	mov	r5, r1
 800391a:	f7fc fd7b 	bl	8000414 <__aeabi_i2d>
 800391e:	4606      	mov	r6, r0
 8003920:	460f      	mov	r7, r1
 8003922:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <__ieee754_pow+0x73c>)
 8003924:	4622      	mov	r2, r4
 8003926:	444b      	add	r3, r9
 8003928:	e9d3 8900 	ldrd	r8, r9, [r3]
 800392c:	462b      	mov	r3, r5
 800392e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003932:	f7fc fc23 	bl	800017c <__adddf3>
 8003936:	4642      	mov	r2, r8
 8003938:	464b      	mov	r3, r9
 800393a:	f7fc fc1f 	bl	800017c <__adddf3>
 800393e:	4632      	mov	r2, r6
 8003940:	463b      	mov	r3, r7
 8003942:	f7fc fc1b 	bl	800017c <__adddf3>
 8003946:	9804      	ldr	r0, [sp, #16]
 8003948:	4632      	mov	r2, r6
 800394a:	463b      	mov	r3, r7
 800394c:	4682      	mov	sl, r0
 800394e:	468b      	mov	fp, r1
 8003950:	f7fc fc12 	bl	8000178 <__aeabi_dsub>
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	f7fc fc0e 	bl	8000178 <__aeabi_dsub>
 800395c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003960:	e60b      	b.n	800357a <__ieee754_pow+0x2ea>
 8003962:	f04f 0801 	mov.w	r8, #1
 8003966:	e6a8      	b.n	80036ba <__ieee754_pow+0x42a>
 8003968:	4a454eef 	.word	0x4a454eef
 800396c:	3fca7e28 	.word	0x3fca7e28
 8003970:	93c9db65 	.word	0x93c9db65
 8003974:	3fcd864a 	.word	0x3fcd864a
 8003978:	a91d4101 	.word	0xa91d4101
 800397c:	3fd17460 	.word	0x3fd17460
 8003980:	518f264d 	.word	0x518f264d
 8003984:	3fd55555 	.word	0x3fd55555
 8003988:	db6fabff 	.word	0xdb6fabff
 800398c:	3fdb6db6 	.word	0x3fdb6db6
 8003990:	33333303 	.word	0x33333303
 8003994:	3fe33333 	.word	0x3fe33333
 8003998:	e0000000 	.word	0xe0000000
 800399c:	3feec709 	.word	0x3feec709
 80039a0:	dc3a03fd 	.word	0xdc3a03fd
 80039a4:	3feec709 	.word	0x3feec709
 80039a8:	145b01f5 	.word	0x145b01f5
 80039ac:	be3e2fe0 	.word	0xbe3e2fe0
 80039b0:	43400000 	.word	0x43400000
 80039b4:	0003988e 	.word	0x0003988e
 80039b8:	000bb679 	.word	0x000bb679
 80039bc:	08004090 	.word	0x08004090
 80039c0:	3ff00000 	.word	0x3ff00000
 80039c4:	40080000 	.word	0x40080000
 80039c8:	080040b0 	.word	0x080040b0
 80039cc:	080040a0 	.word	0x080040a0
 80039d0:	a39b      	add	r3, pc, #620	; (adr r3, 8003c40 <__ieee754_pow+0x9b0>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	4640      	mov	r0, r8
 80039d8:	4649      	mov	r1, r9
 80039da:	f7fc fbcf 	bl	800017c <__adddf3>
 80039de:	4622      	mov	r2, r4
 80039e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039e4:	462b      	mov	r3, r5
 80039e6:	4650      	mov	r0, sl
 80039e8:	4639      	mov	r1, r7
 80039ea:	f7fc fbc5 	bl	8000178 <__aeabi_dsub>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039f6:	f7fd f807 	bl	8000a08 <__aeabi_dcmpgt>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	f47f ae0d 	bne.w	800361a <__ieee754_pow+0x38a>
 8003a00:	4aa3      	ldr	r2, [pc, #652]	; (8003c90 <__ieee754_pow+0xa00>)
 8003a02:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003a06:	4293      	cmp	r3, r2
 8003a08:	f340 8103 	ble.w	8003c12 <__ieee754_pow+0x982>
 8003a0c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003a10:	2000      	movs	r0, #0
 8003a12:	151b      	asrs	r3, r3, #20
 8003a14:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003a18:	fa4a f303 	asr.w	r3, sl, r3
 8003a1c:	4433      	add	r3, r6
 8003a1e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003a22:	4f9c      	ldr	r7, [pc, #624]	; (8003c94 <__ieee754_pow+0xa04>)
 8003a24:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003a28:	4117      	asrs	r7, r2
 8003a2a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003a2e:	ea23 0107 	bic.w	r1, r3, r7
 8003a32:	f1c2 0214 	rsb	r2, r2, #20
 8003a36:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003a3a:	fa4a fa02 	asr.w	sl, sl, r2
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4620      	mov	r0, r4
 8003a46:	4629      	mov	r1, r5
 8003a48:	bfb8      	it	lt
 8003a4a:	f1ca 0a00 	rsblt	sl, sl, #0
 8003a4e:	f7fc fb93 	bl	8000178 <__aeabi_dsub>
 8003a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a5a:	4642      	mov	r2, r8
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	f7fc fb8d 	bl	800017c <__adddf3>
 8003a62:	a379      	add	r3, pc, #484	; (adr r3, 8003c48 <__ieee754_pow+0x9b8>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	2000      	movs	r0, #0
 8003a6a:	460d      	mov	r5, r1
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	f7fc fd3b 	bl	80004e8 <__aeabi_dmul>
 8003a72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a76:	4606      	mov	r6, r0
 8003a78:	460f      	mov	r7, r1
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	f7fc fb7b 	bl	8000178 <__aeabi_dsub>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4640      	mov	r0, r8
 8003a88:	4649      	mov	r1, r9
 8003a8a:	f7fc fb75 	bl	8000178 <__aeabi_dsub>
 8003a8e:	a370      	add	r3, pc, #448	; (adr r3, 8003c50 <__ieee754_pow+0x9c0>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fd28 	bl	80004e8 <__aeabi_dmul>
 8003a98:	a36f      	add	r3, pc, #444	; (adr r3, 8003c58 <__ieee754_pow+0x9c8>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	4680      	mov	r8, r0
 8003aa0:	4689      	mov	r9, r1
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	f7fc fd1f 	bl	80004e8 <__aeabi_dmul>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	f7fc fb63 	bl	800017c <__adddf3>
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	460d      	mov	r5, r1
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4630      	mov	r0, r6
 8003ac0:	4639      	mov	r1, r7
 8003ac2:	f7fc fb5b 	bl	800017c <__adddf3>
 8003ac6:	4632      	mov	r2, r6
 8003ac8:	463b      	mov	r3, r7
 8003aca:	4680      	mov	r8, r0
 8003acc:	4689      	mov	r9, r1
 8003ace:	f7fc fb53 	bl	8000178 <__aeabi_dsub>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4629      	mov	r1, r5
 8003ada:	f7fc fb4d 	bl	8000178 <__aeabi_dsub>
 8003ade:	4642      	mov	r2, r8
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	460f      	mov	r7, r1
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4649      	mov	r1, r9
 8003aea:	f7fc fcfd 	bl	80004e8 <__aeabi_dmul>
 8003aee:	a35c      	add	r3, pc, #368	; (adr r3, 8003c60 <__ieee754_pow+0x9d0>)
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	4604      	mov	r4, r0
 8003af6:	460d      	mov	r5, r1
 8003af8:	f7fc fcf6 	bl	80004e8 <__aeabi_dmul>
 8003afc:	a35a      	add	r3, pc, #360	; (adr r3, 8003c68 <__ieee754_pow+0x9d8>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fb39 	bl	8000178 <__aeabi_dsub>
 8003b06:	4622      	mov	r2, r4
 8003b08:	462b      	mov	r3, r5
 8003b0a:	f7fc fced 	bl	80004e8 <__aeabi_dmul>
 8003b0e:	a358      	add	r3, pc, #352	; (adr r3, 8003c70 <__ieee754_pow+0x9e0>)
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f7fc fb32 	bl	800017c <__adddf3>
 8003b18:	4622      	mov	r2, r4
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	f7fc fce4 	bl	80004e8 <__aeabi_dmul>
 8003b20:	a355      	add	r3, pc, #340	; (adr r3, 8003c78 <__ieee754_pow+0x9e8>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f7fc fb27 	bl	8000178 <__aeabi_dsub>
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	f7fc fcdb 	bl	80004e8 <__aeabi_dmul>
 8003b32:	a353      	add	r3, pc, #332	; (adr r3, 8003c80 <__ieee754_pow+0x9f0>)
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f7fc fb20 	bl	800017c <__adddf3>
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	462b      	mov	r3, r5
 8003b40:	f7fc fcd2 	bl	80004e8 <__aeabi_dmul>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4640      	mov	r0, r8
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	f7fc fb14 	bl	8000178 <__aeabi_dsub>
 8003b50:	4604      	mov	r4, r0
 8003b52:	460d      	mov	r5, r1
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	f7fc fcc4 	bl	80004e8 <__aeabi_dmul>
 8003b60:	2200      	movs	r2, #0
 8003b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f7fc fb03 	bl	8000178 <__aeabi_dsub>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b7a:	f7fc fddf 	bl	800073c <__aeabi_ddiv>
 8003b7e:	4632      	mov	r2, r6
 8003b80:	4604      	mov	r4, r0
 8003b82:	460d      	mov	r5, r1
 8003b84:	463b      	mov	r3, r7
 8003b86:	4640      	mov	r0, r8
 8003b88:	4649      	mov	r1, r9
 8003b8a:	f7fc fcad 	bl	80004e8 <__aeabi_dmul>
 8003b8e:	4632      	mov	r2, r6
 8003b90:	463b      	mov	r3, r7
 8003b92:	f7fc faf3 	bl	800017c <__adddf3>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc faeb 	bl	8000178 <__aeabi_dsub>
 8003ba2:	4642      	mov	r2, r8
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	f7fc fae7 	bl	8000178 <__aeabi_dsub>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	2000      	movs	r0, #0
 8003bb0:	4939      	ldr	r1, [pc, #228]	; (8003c98 <__ieee754_pow+0xa08>)
 8003bb2:	f7fc fae1 	bl	8000178 <__aeabi_dsub>
 8003bb6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003bba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003bbe:	da2b      	bge.n	8003c18 <__ieee754_pow+0x988>
 8003bc0:	4652      	mov	r2, sl
 8003bc2:	f000 f9b9 	bl	8003f38 <scalbn>
 8003bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bca:	f7ff bbf6 	b.w	80033ba <__ieee754_pow+0x12a>
 8003bce:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <__ieee754_pow+0xa0c>)
 8003bd0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003bd4:	429f      	cmp	r7, r3
 8003bd6:	f77f af13 	ble.w	8003a00 <__ieee754_pow+0x770>
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <__ieee754_pow+0xa10>)
 8003bdc:	440b      	add	r3, r1
 8003bde:	4303      	orrs	r3, r0
 8003be0:	d00b      	beq.n	8003bfa <__ieee754_pow+0x96a>
 8003be2:	a329      	add	r3, pc, #164	; (adr r3, 8003c88 <__ieee754_pow+0x9f8>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bec:	f7fc fc7c 	bl	80004e8 <__aeabi_dmul>
 8003bf0:	a325      	add	r3, pc, #148	; (adr r3, 8003c88 <__ieee754_pow+0x9f8>)
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f7ff bbe0 	b.w	80033ba <__ieee754_pow+0x12a>
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	f7fc fabb 	bl	8000178 <__aeabi_dsub>
 8003c02:	4642      	mov	r2, r8
 8003c04:	464b      	mov	r3, r9
 8003c06:	f7fc fef5 	bl	80009f4 <__aeabi_dcmpge>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	f43f aef8 	beq.w	8003a00 <__ieee754_pow+0x770>
 8003c10:	e7e7      	b.n	8003be2 <__ieee754_pow+0x952>
 8003c12:	f04f 0a00 	mov.w	sl, #0
 8003c16:	e71e      	b.n	8003a56 <__ieee754_pow+0x7c6>
 8003c18:	4621      	mov	r1, r4
 8003c1a:	e7d4      	b.n	8003bc6 <__ieee754_pow+0x936>
 8003c1c:	f04f 0b00 	mov.w	fp, #0
 8003c20:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003c98 <__ieee754_pow+0xa08>
 8003c24:	f7ff bb95 	b.w	8003352 <__ieee754_pow+0xc2>
 8003c28:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003c2c:	f7ff bb91 	b.w	8003352 <__ieee754_pow+0xc2>
 8003c30:	4638      	mov	r0, r7
 8003c32:	4641      	mov	r1, r8
 8003c34:	f7ff bbc3 	b.w	80033be <__ieee754_pow+0x12e>
 8003c38:	9200      	str	r2, [sp, #0]
 8003c3a:	f7ff bb9f 	b.w	800337c <__ieee754_pow+0xec>
 8003c3e:	bf00      	nop
 8003c40:	652b82fe 	.word	0x652b82fe
 8003c44:	3c971547 	.word	0x3c971547
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	3fe62e43 	.word	0x3fe62e43
 8003c50:	fefa39ef 	.word	0xfefa39ef
 8003c54:	3fe62e42 	.word	0x3fe62e42
 8003c58:	0ca86c39 	.word	0x0ca86c39
 8003c5c:	be205c61 	.word	0xbe205c61
 8003c60:	72bea4d0 	.word	0x72bea4d0
 8003c64:	3e663769 	.word	0x3e663769
 8003c68:	c5d26bf1 	.word	0xc5d26bf1
 8003c6c:	3ebbbd41 	.word	0x3ebbbd41
 8003c70:	af25de2c 	.word	0xaf25de2c
 8003c74:	3f11566a 	.word	0x3f11566a
 8003c78:	16bebd93 	.word	0x16bebd93
 8003c7c:	3f66c16c 	.word	0x3f66c16c
 8003c80:	5555553e 	.word	0x5555553e
 8003c84:	3fc55555 	.word	0x3fc55555
 8003c88:	c2f8f359 	.word	0xc2f8f359
 8003c8c:	01a56e1f 	.word	0x01a56e1f
 8003c90:	3fe00000 	.word	0x3fe00000
 8003c94:	000fffff 	.word	0x000fffff
 8003c98:	3ff00000 	.word	0x3ff00000
 8003c9c:	4090cbff 	.word	0x4090cbff
 8003ca0:	3f6f3400 	.word	0x3f6f3400

08003ca4 <__ieee754_sqrt>:
 8003ca4:	4b54      	ldr	r3, [pc, #336]	; (8003df8 <__ieee754_sqrt+0x154>)
 8003ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003caa:	438b      	bics	r3, r1
 8003cac:	4606      	mov	r6, r0
 8003cae:	460d      	mov	r5, r1
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	d10f      	bne.n	8003cd6 <__ieee754_sqrt+0x32>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	f7fc fc15 	bl	80004e8 <__aeabi_dmul>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7fc fa59 	bl	800017c <__adddf3>
 8003cca:	4606      	mov	r6, r0
 8003ccc:	460d      	mov	r5, r1
 8003cce:	4630      	mov	r0, r6
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cd6:	2900      	cmp	r1, #0
 8003cd8:	4607      	mov	r7, r0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	dc0e      	bgt.n	8003cfc <__ieee754_sqrt+0x58>
 8003cde:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003ce2:	ea5c 0707 	orrs.w	r7, ip, r7
 8003ce6:	d0f2      	beq.n	8003cce <__ieee754_sqrt+0x2a>
 8003ce8:	b141      	cbz	r1, 8003cfc <__ieee754_sqrt+0x58>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	f7fc fa43 	bl	8000178 <__aeabi_dsub>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	f7fc fd21 	bl	800073c <__aeabi_ddiv>
 8003cfa:	e7e6      	b.n	8003cca <__ieee754_sqrt+0x26>
 8003cfc:	1512      	asrs	r2, r2, #20
 8003cfe:	d074      	beq.n	8003dea <__ieee754_sqrt+0x146>
 8003d00:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003d04:	07d5      	lsls	r5, r2, #31
 8003d06:	f04f 0500 	mov.w	r5, #0
 8003d0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003d0e:	bf48      	it	mi
 8003d10:	0fd9      	lsrmi	r1, r3, #31
 8003d12:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003d16:	bf44      	itt	mi
 8003d18:	005b      	lslmi	r3, r3, #1
 8003d1a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8003d1e:	1051      	asrs	r1, r2, #1
 8003d20:	0fda      	lsrs	r2, r3, #31
 8003d22:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003d26:	4628      	mov	r0, r5
 8003d28:	2216      	movs	r2, #22
 8003d2a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	1987      	adds	r7, r0, r6
 8003d32:	42a7      	cmp	r7, r4
 8003d34:	bfde      	ittt	le
 8003d36:	19b8      	addle	r0, r7, r6
 8003d38:	1be4      	suble	r4, r4, r7
 8003d3a:	19ad      	addle	r5, r5, r6
 8003d3c:	0fdf      	lsrs	r7, r3, #31
 8003d3e:	3a01      	subs	r2, #1
 8003d40:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8003d44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003d4c:	d1f0      	bne.n	8003d30 <__ieee754_sqrt+0x8c>
 8003d4e:	f04f 0c20 	mov.w	ip, #32
 8003d52:	4696      	mov	lr, r2
 8003d54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003d58:	4284      	cmp	r4, r0
 8003d5a:	eb06 070e 	add.w	r7, r6, lr
 8003d5e:	dc02      	bgt.n	8003d66 <__ieee754_sqrt+0xc2>
 8003d60:	d112      	bne.n	8003d88 <__ieee754_sqrt+0xe4>
 8003d62:	429f      	cmp	r7, r3
 8003d64:	d810      	bhi.n	8003d88 <__ieee754_sqrt+0xe4>
 8003d66:	2f00      	cmp	r7, #0
 8003d68:	eb07 0e06 	add.w	lr, r7, r6
 8003d6c:	da42      	bge.n	8003df4 <__ieee754_sqrt+0x150>
 8003d6e:	f1be 0f00 	cmp.w	lr, #0
 8003d72:	db3f      	blt.n	8003df4 <__ieee754_sqrt+0x150>
 8003d74:	f100 0801 	add.w	r8, r0, #1
 8003d78:	1a24      	subs	r4, r4, r0
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	429f      	cmp	r7, r3
 8003d7e:	bf88      	it	hi
 8003d80:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8003d84:	1bdb      	subs	r3, r3, r7
 8003d86:	4432      	add	r2, r6
 8003d88:	0064      	lsls	r4, r4, #1
 8003d8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8003d8e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8003d92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003d96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d9a:	d1dd      	bne.n	8003d58 <__ieee754_sqrt+0xb4>
 8003d9c:	4323      	orrs	r3, r4
 8003d9e:	d006      	beq.n	8003dae <__ieee754_sqrt+0x10a>
 8003da0:	1c54      	adds	r4, r2, #1
 8003da2:	bf0b      	itete	eq
 8003da4:	4662      	moveq	r2, ip
 8003da6:	3201      	addne	r2, #1
 8003da8:	3501      	addeq	r5, #1
 8003daa:	f022 0201 	bicne.w	r2, r2, #1
 8003dae:	106b      	asrs	r3, r5, #1
 8003db0:	0852      	lsrs	r2, r2, #1
 8003db2:	07e8      	lsls	r0, r5, #31
 8003db4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003db8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003dbc:	bf48      	it	mi
 8003dbe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003dc2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8003dc6:	4616      	mov	r6, r2
 8003dc8:	e781      	b.n	8003cce <__ieee754_sqrt+0x2a>
 8003dca:	0adc      	lsrs	r4, r3, #11
 8003dcc:	3915      	subs	r1, #21
 8003dce:	055b      	lsls	r3, r3, #21
 8003dd0:	2c00      	cmp	r4, #0
 8003dd2:	d0fa      	beq.n	8003dca <__ieee754_sqrt+0x126>
 8003dd4:	02e6      	lsls	r6, r4, #11
 8003dd6:	d50a      	bpl.n	8003dee <__ieee754_sqrt+0x14a>
 8003dd8:	f1c2 0020 	rsb	r0, r2, #32
 8003ddc:	fa23 f000 	lsr.w	r0, r3, r0
 8003de0:	1e55      	subs	r5, r2, #1
 8003de2:	4093      	lsls	r3, r2
 8003de4:	4304      	orrs	r4, r0
 8003de6:	1b4a      	subs	r2, r1, r5
 8003de8:	e78a      	b.n	8003d00 <__ieee754_sqrt+0x5c>
 8003dea:	4611      	mov	r1, r2
 8003dec:	e7f0      	b.n	8003dd0 <__ieee754_sqrt+0x12c>
 8003dee:	0064      	lsls	r4, r4, #1
 8003df0:	3201      	adds	r2, #1
 8003df2:	e7ef      	b.n	8003dd4 <__ieee754_sqrt+0x130>
 8003df4:	4680      	mov	r8, r0
 8003df6:	e7bf      	b.n	8003d78 <__ieee754_sqrt+0xd4>
 8003df8:	7ff00000 	.word	0x7ff00000

08003dfc <fabs>:
 8003dfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e00:	4619      	mov	r1, r3
 8003e02:	4770      	bx	lr

08003e04 <finite>:
 8003e04:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003e08:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8003e0c:	0fc0      	lsrs	r0, r0, #31
 8003e0e:	4770      	bx	lr

08003e10 <matherr>:
 8003e10:	2000      	movs	r0, #0
 8003e12:	4770      	bx	lr

08003e14 <nan>:
 8003e14:	2000      	movs	r0, #0
 8003e16:	4901      	ldr	r1, [pc, #4]	; (8003e1c <nan+0x8>)
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	7ff80000 	.word	0x7ff80000

08003e20 <rint>:
 8003e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003e26:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8003e2a:	f1bc 0f13 	cmp.w	ip, #19
 8003e2e:	4604      	mov	r4, r0
 8003e30:	460d      	mov	r5, r1
 8003e32:	460b      	mov	r3, r1
 8003e34:	4606      	mov	r6, r0
 8003e36:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8003e3a:	dc5a      	bgt.n	8003ef2 <rint+0xd2>
 8003e3c:	f1bc 0f00 	cmp.w	ip, #0
 8003e40:	da2b      	bge.n	8003e9a <rint+0x7a>
 8003e42:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003e46:	4302      	orrs	r2, r0
 8003e48:	d023      	beq.n	8003e92 <rint+0x72>
 8003e4a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003e4e:	4302      	orrs	r2, r0
 8003e50:	4256      	negs	r6, r2
 8003e52:	4316      	orrs	r6, r2
 8003e54:	0c4b      	lsrs	r3, r1, #17
 8003e56:	0b36      	lsrs	r6, r6, #12
 8003e58:	4934      	ldr	r1, [pc, #208]	; (8003f2c <rint+0x10c>)
 8003e5a:	045b      	lsls	r3, r3, #17
 8003e5c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8003e60:	ea46 0503 	orr.w	r5, r6, r3
 8003e64:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8003e68:	4602      	mov	r2, r0
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8003e70:	4620      	mov	r0, r4
 8003e72:	4629      	mov	r1, r5
 8003e74:	f7fc f982 	bl	800017c <__adddf3>
 8003e78:	e9cd 0100 	strd	r0, r1, [sp]
 8003e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e80:	462b      	mov	r3, r5
 8003e82:	4622      	mov	r2, r4
 8003e84:	f7fc f978 	bl	8000178 <__aeabi_dsub>
 8003e88:	4604      	mov	r4, r0
 8003e8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e8e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8003e92:	4620      	mov	r0, r4
 8003e94:	4629      	mov	r1, r5
 8003e96:	b003      	add	sp, #12
 8003e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9a:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <rint+0x110>)
 8003e9c:	fa42 f20c 	asr.w	r2, r2, ip
 8003ea0:	4011      	ands	r1, r2
 8003ea2:	4301      	orrs	r1, r0
 8003ea4:	d0f5      	beq.n	8003e92 <rint+0x72>
 8003ea6:	0852      	lsrs	r2, r2, #1
 8003ea8:	ea05 0102 	and.w	r1, r5, r2
 8003eac:	ea50 0601 	orrs.w	r6, r0, r1
 8003eb0:	d00c      	beq.n	8003ecc <rint+0xac>
 8003eb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003eb6:	f1bc 0f13 	cmp.w	ip, #19
 8003eba:	bf0c      	ite	eq
 8003ebc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8003ec0:	2600      	movne	r6, #0
 8003ec2:	ea25 0202 	bic.w	r2, r5, r2
 8003ec6:	fa43 f30c 	asr.w	r3, r3, ip
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	4917      	ldr	r1, [pc, #92]	; (8003f2c <rint+0x10c>)
 8003ece:	4632      	mov	r2, r6
 8003ed0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8003ed4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ed8:	4620      	mov	r0, r4
 8003eda:	4629      	mov	r1, r5
 8003edc:	f7fc f94e 	bl	800017c <__adddf3>
 8003ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8003ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ee8:	4622      	mov	r2, r4
 8003eea:	462b      	mov	r3, r5
 8003eec:	f7fc f944 	bl	8000178 <__aeabi_dsub>
 8003ef0:	e008      	b.n	8003f04 <rint+0xe4>
 8003ef2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8003ef6:	dd08      	ble.n	8003f0a <rint+0xea>
 8003ef8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8003efc:	d1c9      	bne.n	8003e92 <rint+0x72>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f7fc f93c 	bl	800017c <__adddf3>
 8003f04:	4604      	mov	r4, r0
 8003f06:	460d      	mov	r5, r1
 8003f08:	e7c3      	b.n	8003e92 <rint+0x72>
 8003f0a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	40ca      	lsrs	r2, r1
 8003f14:	4210      	tst	r0, r2
 8003f16:	d0bc      	beq.n	8003e92 <rint+0x72>
 8003f18:	0852      	lsrs	r2, r2, #1
 8003f1a:	4210      	tst	r0, r2
 8003f1c:	bf1f      	itttt	ne
 8003f1e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8003f22:	ea20 0202 	bicne.w	r2, r0, r2
 8003f26:	410e      	asrne	r6, r1
 8003f28:	4316      	orrne	r6, r2
 8003f2a:	e7cf      	b.n	8003ecc <rint+0xac>
 8003f2c:	080040c0 	.word	0x080040c0
 8003f30:	000fffff 	.word	0x000fffff
 8003f34:	00000000 	.word	0x00000000

08003f38 <scalbn>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	4616      	mov	r6, r2
 8003f3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003f40:	4604      	mov	r4, r0
 8003f42:	460d      	mov	r5, r1
 8003f44:	460b      	mov	r3, r1
 8003f46:	b982      	cbnz	r2, 8003f6a <scalbn+0x32>
 8003f48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003f4c:	4303      	orrs	r3, r0
 8003f4e:	d034      	beq.n	8003fba <scalbn+0x82>
 8003f50:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <scalbn+0xd0>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	f7fc fac8 	bl	80004e8 <__aeabi_dmul>
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <scalbn+0xd4>)
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	429e      	cmp	r6, r3
 8003f5e:	460d      	mov	r5, r1
 8003f60:	da0d      	bge.n	8003f7e <scalbn+0x46>
 8003f62:	a325      	add	r3, pc, #148	; (adr r3, 8003ff8 <scalbn+0xc0>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	e01c      	b.n	8003fa4 <scalbn+0x6c>
 8003f6a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8003f6e:	42ba      	cmp	r2, r7
 8003f70:	d109      	bne.n	8003f86 <scalbn+0x4e>
 8003f72:	4602      	mov	r2, r0
 8003f74:	f7fc f902 	bl	800017c <__adddf3>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	e01d      	b.n	8003fba <scalbn+0x82>
 8003f7e:	460b      	mov	r3, r1
 8003f80:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003f84:	3a36      	subs	r2, #54	; 0x36
 8003f86:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003f8a:	4432      	add	r2, r6
 8003f8c:	428a      	cmp	r2, r1
 8003f8e:	dd0c      	ble.n	8003faa <scalbn+0x72>
 8003f90:	4622      	mov	r2, r4
 8003f92:	462b      	mov	r3, r5
 8003f94:	a11a      	add	r1, pc, #104	; (adr r1, 8004000 <scalbn+0xc8>)
 8003f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f9a:	f000 f83b 	bl	8004014 <copysign>
 8003f9e:	a318      	add	r3, pc, #96	; (adr r3, 8004000 <scalbn+0xc8>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc faa0 	bl	80004e8 <__aeabi_dmul>
 8003fa8:	e7e6      	b.n	8003f78 <scalbn+0x40>
 8003faa:	2a00      	cmp	r2, #0
 8003fac:	dd08      	ble.n	8003fc0 <scalbn+0x88>
 8003fae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003fb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fb6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003fba:	4620      	mov	r0, r4
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003fc4:	da0b      	bge.n	8003fde <scalbn+0xa6>
 8003fc6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003fca:	429e      	cmp	r6, r3
 8003fcc:	4622      	mov	r2, r4
 8003fce:	462b      	mov	r3, r5
 8003fd0:	dce0      	bgt.n	8003f94 <scalbn+0x5c>
 8003fd2:	a109      	add	r1, pc, #36	; (adr r1, 8003ff8 <scalbn+0xc0>)
 8003fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fd8:	f000 f81c 	bl	8004014 <copysign>
 8003fdc:	e7c1      	b.n	8003f62 <scalbn+0x2a>
 8003fde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003fe2:	3236      	adds	r2, #54	; 0x36
 8003fe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fe8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003fec:	4620      	mov	r0, r4
 8003fee:	4629      	mov	r1, r5
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <scalbn+0xd8>)
 8003ff4:	e7d6      	b.n	8003fa4 <scalbn+0x6c>
 8003ff6:	bf00      	nop
 8003ff8:	c2f8f359 	.word	0xc2f8f359
 8003ffc:	01a56e1f 	.word	0x01a56e1f
 8004000:	8800759c 	.word	0x8800759c
 8004004:	7e37e43c 	.word	0x7e37e43c
 8004008:	43500000 	.word	0x43500000
 800400c:	ffff3cb0 	.word	0xffff3cb0
 8004010:	3c900000 	.word	0x3c900000

08004014 <copysign>:
 8004014:	b530      	push	{r4, r5, lr}
 8004016:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800401a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401e:	ea42 0503 	orr.w	r5, r2, r3
 8004022:	4629      	mov	r1, r5
 8004024:	bd30      	pop	{r4, r5, pc}
	...

08004028 <_init>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr

08004034 <_fini>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr
